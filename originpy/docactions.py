entity_actions = {'origins:action_on_set': [], 'origins:add_velocity': [{'name': 'x', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '0.0', 'description': 'The amount of velocity to add on the x-axis.'}, {'name': 'y', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '0.0', 'description': 'The amount of velocity to add on the y-axis.'}, {'name': 'z', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '0.0', 'description': 'The amount of velocity to add on the z-axis.'}, {'name': 'space', 'type': [{'is_array': False, 'type': 'Space'}], 'default': '"world"', 'description': 'Determines how the direction of the velocity to add/set will be calculated.'}, {'name': 'client', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'If this is false, the action will not execute on the client.'}, {'name': 'server', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'If this is false, the action will not execute on the server.'}, {'name': 'set', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'If this is true, the action will act as a "set" velocity action, overriding the entity\'s current velocity instead of adding to it.'}], 'origins:add_xp': [{'name': 'points', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '_optional_', 'description': 'If set, this is the amount experience points that will be given to the player. Can not be negative.'}, {'name': 'levels', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '_optional_', 'description': 'If set, this is the amount experience levels that will be given to the player. Can be negative and thus used to subtract levels.'}], 'origins:apply_effect': [{'name': 'effect', 'type': [{'is_array': False, 'type': 'Status Effect Instance'}], 'default': '_optional_', 'description': 'If set, this status effect will be applied by this action.'}, {'name': 'effects', 'type': [{'is_array': True, 'type': 'Status Effect Instance'}], 'default': '_optional_', 'description': 'If set, these status effects will be applied by this action.'}], 'origins:area_of_effect': [{'name': 'radius', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '16.0', 'description': 'Determines the radius of the area.'}, {'name': 'shape', 'type': [{'is_array': False, 'type': 'Shape'}], 'default': '"cube"', 'description': 'Determines the shape of the area.'}, {'name': 'bientity_action', 'type': [{'is_array': False, 'type': 'Bi-entity Action Type'}], 'default': '', 'description': "The bi-entity action to execute on either or both the '**actor**' or the '**target(s)**'."}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '*optional*', 'description': "If specified, the specified bi-entity action will only be executed on either or both the '**actor**' or '**target(s)**' that fulfill this bi-entity condition."}], 'origins:block_action_at': [{'name': 'block_action', 'type': [{'is_array': False, 'type': 'Block Action Type'}], 'default': '', 'description': 'The block action type to execute.'}], 'origins:change_resource': [{'name': 'resource', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the power that uses the [Resource (Power Type)](../power_types/resource.md) or has a built-in cooldown.'}, {'name': 'change', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': "This value will be added to the resource (won't go below `min` or above `max` of the [Resource (Power Type)](../power_types/resource.md))."}, {'name': 'operation', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"add"', 'description': 'Determines if the action should add or set the value of the resource. Accepts `"add"` or `"set"`.'}], 'origins:clear_effect': [{'name': 'effect', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, the status effect with this namespace and ID will be cleared. If not specified, all status effects will be cleared.'}], 'origins:crafting_table': [], 'origins:damage': [{'name': 'amount', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The amount of damage to deal.'}, {'name': 'source', 'type': [{'is_array': False, 'type': 'Damage Source'}], 'default': '<span style="color:darkred"><b>DEPRECATED</b></span>', 'description': 'Use `damage_type` instead. See [Damage Source (Data Type)](../data_types/damage_source.md) for more details.'}, {'name': 'damage_type', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'Defines the properties of the damage source that will be dealt, such as part of its death message, and whether it can bypass armor, shield, etc. (via damage type tags.)'}, {'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will be applied to the damage taken by the entity.'}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will be applied to the damage taken by the entity.'}], 'origins:dismount': [], 'origins:drop_inventory': [{'name': 'inventory_type', 'type': [{'is_array': False, 'type': 'Inventory Type'}], 'default': '"inventory"', 'description': 'Determines whether to drop the items from the inventory of the entity or the inventory of a power present in the entity.'}, {'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the entity **before** the items are dropped.'}, {'name': 'item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the affected items **before** the affected items are dropped.'}, {'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, only items which fulfill this condition will be dropped.'}, {'name': 'slot', 'type': [{'is_array': False, 'type': 'Item Slot'}], 'default': '_optional_', 'description': 'If specified, only items in the designated slot will be dropped.'}, {'name': 'slots', 'type': [{'is_array': True, 'type': 'Item Slot'}], 'default': '_optional_', 'description': 'If specified, only items in the designated slots will be dropped.'}, {'name': 'power', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, the items in the inventory of this power will be dropped instead of the items in the entity\'s inventory if `inventory_type` is set to `"power"`.'}, {'name': 'throw_randomly', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'If `true`, items will be thrown in random directions instead of being normally dropped, similar to how items are dropped when you die.'}, {'name': 'retain_ownership', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'If `true`, the dropped items will have their `Thrower` NBT set as the `UUID` NBT of the entity that invoked the action.'}, {'name': 'amount', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '_optional_', 'description': 'If specified, the affected items will be split by this amount.'}], 'origins:emit_game_event': [{'name': 'event', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of a game event.'}], 'origins:ender_chest': [], 'origins:equipped_item_action': [{'name': 'equipment_slot', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'Which equipped item to execute the action on. One of: `"mainhand"`, `"offhand"`, `"head"`, `"chest"`, `"legs"`, `"feet"`.'}, {'name': 'action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '', 'description': 'The item action type to execute on the item stack in the specified equipment slot.'}], 'origins:execute_command': [{'name': 'command', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'The command to execute on the entity.'}], 'origins:exhaust': [{'name': 'amount', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The amount of exhaustion to apply to the player.'}], 'origins:explode': [{'name': 'power', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'Determines the power of the explosion.'}, {'name': 'destruction_type', 'type': [{'is_array': False, 'type': 'Destruction Type'}], 'default': '"break"', 'description': 'Determines the effect of the explosion to the terrain.'}, {'name': 'damage_self', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines if the entity that invoked the action should take damage from the summoned explosion.'}, {'name': 'indestructible', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If specified, the blocks that fulfill this condition will not be destroyed by the summoned explosion.'}, {'name': 'destructible', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If specified, only the blocks that fulfill this condition will be destroyed by the summoned explosion.'}, {'name': 'create_fire', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines if the summoned explosion should create fire.'}], 'origins:extinguish': [], 'origins:feed': [{'name': 'food', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The amount of food points to restore.'}, {'name': 'saturation', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The amount of saturation points to restore.'}], 'origins:fire_projectile': [{'name': 'entity_type', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The identifier of the projectile or entity that will be launched.'}, {'name': 'divergence', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'Determines how much the projectile or entity that will be launched is affected by random spread.'}, {'name': 'speed', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'Determines the speed of the projectile or entity that will be launched.'}, {'name': 'count', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'Determines the count of projectiles or entities that will be launched.'}, {'name': 'tag', 'type': [{'is_array': False, 'type': 'NBT'}], 'default': '_optional_', 'description': 'If specified, this NBT data will be added to the projectile or entity that will be launched.'}, {'name': 'projectile_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this entity action will be executed on the projectile or entity that will be launched.'}], 'origins:gain_air': [{'name': 'value', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The amount of breath to restore.'}], 'origins:give': [{'name': 'stack', 'type': [{'is_array': False, 'type': 'Item Stack'}], 'default': '', 'description': 'The item stack to give to the entity.'}, {'name': 'item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': "If specified, the specified item action type will be executed on the item stack before it's given to the player."}, {'name': 'preferred_slot', 'type': [{'is_array': False, 'type': 'String'}], 'default': '_optional_', 'description': 'If specified, this will prioritize the action to put the item in the specified slot. Accepts `"chest"`, `"feet"`, `"head"`, `"legs"`, `"mainhand"` or `"offhand"`.'}], 'origins:grant_advancement': [{'name': 'advancement', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the advancement to be granted to the player.'}, {'name': 'criteria', 'type': [{'is_array': True, 'type': 'String'}], 'default': '_optional_', 'description': 'If specified, determines the criteria to grant to the specified advancement.'}, {'name': 'criterion', 'type': [{'is_array': False, 'type': 'String'}], 'default': '_optional_', 'description': 'If specified, determines the criterion to grant to the specified advancement.'}, {'name': 'selection', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"only"', 'description': 'Determines how to select the parent advancement(s) or child(ren) advancement(s) of the specified advancement. Can be one of: `"only"`, `"through"`, `"from"`, `"until"`, `"everything"`'}], 'origins:grant_power': [{'name': 'power', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the power to be granted to the entity.'}, {'name': 'source', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the source of the granted power.'}], 'origins:heal': [{'name': 'amount', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The amount of health to restore.'}], 'origins:modify_death_ticks': [{'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '', 'description': 'This modifier will be applied to the current death ticks value of the entity.'}], 'origins:modify_inventory': [{'name': 'inventory_type', 'type': [{'is_array': False, 'type': 'Inventory Type'}], 'default': '"inventory"', 'description': 'Determines whether to modify the items in the inventory of the entity or the inventory of a power present in the entity.'}, {'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the entity **before** the items are modified.'}, {'name': 'item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '', 'description': 'The action to be executed on the affected items.'}, {'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, only items which fulfill this condition will be affected by specified action.'}, {'name': 'slot', 'type': [{'is_array': False, 'type': 'Item Slot'}], 'default': '_optional_', 'description': 'If specified, only items in the designated slot will be modified.'}, {'name': 'slots', 'type': [{'is_array': True, 'type': 'Item Slot'}], 'default': '_optional_', 'description': 'If specified, only items in the designated slots will be modified.'}, {'name': 'power', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, the items in the inventory of this power will be modified instead of the items in the entity\'s inventory if `inventory_type` is set to `"power"`.'}, {'name': 'process_mode', 'type': [{'is_array': False, 'type': 'Process Mode'}], 'default': '"stacks"', 'description': 'Determines how the affected item stacks in the specified inventory are modified.'}, {'name': 'limit', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'Determines the max amount of times the action should modify item stacks in the inventory. If the specified value is <= `0`, then there will be no limit.'}], 'origins:modify_resource': [{'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '', 'description': 'This modifier will be applied to the current value of the target power.'}, {'name': 'resource', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'This power will have its value modified; as long as the power is using the [Resource (Power Type)](../power_types/resource.md) or the [Cooldown (Power Type)](../power_types/cooldown.md).'}], 'origins:modify_stat': [{'name': 'stat', 'type': [{'is_array': False, 'type': 'Stat'}], 'default': '', 'description': 'The type and name of the statistic to be modified.'}, {'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '', 'description': 'This modifier will be applied to the current value of the statistic specified.'}], 'origins:passenger_action': [{'name': 'action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the passenger entity.'}, {'name': 'bientity_action', 'type': [{'is_array': False, 'type': 'Bi-entity Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on either the 'actor' (the entity being ridden) or the 'target' (the passenger entity) or both."}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified actions will only be executed if this condition is fulfilled by either the 'actor' (the entity being ridden) or the 'target' (the passenger entity) or both."}, {'name': 'recursive', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'If set to `true`, the specified action(s) will be executed on all the passenger entities.'}], 'origins:play_sound': [{'name': 'sound', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The ID of the sound event to play.'}, {'name': 'category', 'type': [{'is_array': False, 'type': 'String'}], 'default': '*optional*', 'description': 'If specified, this specifies the category and options the sound event falls under. Otherwise, uses the category specified in the entity that invoked this action. Accepts `"master"`, `"music"`, `"record"`, `"weather"`, `"block"`, `"hostile"`, `"neutral"`, `"players"`, `"ambient"` or `"voice"`.'}, {'name': 'volume', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'The volume of the sound event.'}, {'name': 'pitch', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'The pitch of the sound event.'}], 'origins:random_teleport': [], 'origins:raycast': [{'name': 'distance', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '_optional_', 'description': 'Determines the maximum distance the ray-cast will travel.'}, {'name': 'block', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines whether the ray-cast should include blocks.'}, {'name': 'entity', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines whether the ray-cast should include entities.'}, {'name': 'shape_type', 'type': [{'is_array': False, 'type': 'Shape Type'}], 'default': '"visual"', 'description': 'Determines how the ray-cast will handle blocks.'}, {'name': 'fluid_handling', 'type': [{'is_array': False, 'type': 'Fluid Handling'}], 'default': '"any"', 'description': 'Determines how the ray-cast will handle fluids.'}, {'name': 'space', 'type': [{'is_array': False, 'type': 'Space'}], 'default': '"world"', 'description': 'Determines how the direction will be calculated. <span style="color: goldenrod;"><b>Only used if <code>direction</code> is specified.</b></span>'}, {'name': 'direction', 'type': [{'is_array': False, 'type': 'Vector'}], 'default': '_optional_', 'description': 'If specified, determines the direction of the raycast. Otherwise, defaults to the direction at the entity is facing (as if `space` is `"local"`.)'}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified bi-entity action type will only be executed if the specified bi-entity condition type is fulfilled by either or both the 'actor' (the entity that has the power) or 'target' (the entity that was hit by the ray-cast)."}, {'name': 'bientity_action', 'type': [{'is_array': False, 'type': 'Bi-entity Action Type'}], 'default': '_optional_', 'description': "If specified, this bi-entity action type will be executed on either or both the 'actor' (the entity that has the power) or 'target' (the entity that was hit by the ray-cast)."}, {'name': 'entity_distance', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '_optional_', 'description': "Determines the distance of the raycast for entities if `entity` is set to `true`. If absent, it will use the higher value between the entity's attack range (with Reach Entity Attributes compatibility) or the `distance` field."}, {'name': 'block_action', 'type': [{'is_array': False, 'type': 'Block Action Type'}], 'default': '_optional_', 'description': 'If specified, this block action type will be executed on the block the ray-cast has hit.'}, {'name': 'block_distance', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '_optional_', 'description': "Determines the distance of the raycast for blocks if `block` is set to `true`. If absent, it will use the higher value between the entity's block reach (with Reach Entity Attributes compatibility) or the `distance` field."}, {'name': 'before_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, execute this entity action type *before* casting a ray.'}, {'name': 'hit_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, execute this entity action on the entity that executed the ray-cast if the ray-cast has hit an entity/block.'}, {'name': 'miss_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, execute this entity action on the entity that executed the ray-cast if the ray-cast did not hit an entity/block.'}, {'name': 'command_at_hit', 'type': [{'is_array': False, 'type': 'String'}], 'default': '_optional_', 'description': 'The command to execute upon the block/entity the ray-cast has hit.'}, {'name': 'command_hit_offset', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '_optional_', 'description': 'Determines the offset of the command specified in the `command_at_hit` field.'}, {'name': 'command_along_ray', 'type': [{'is_array': False, 'type': 'String'}], 'default': '_optional_', 'description': 'The command to execute for each step of the ray-cast.'}, {'name': 'command_step', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'Determines the size of the step of the ray-cast (in blocks).'}, {'name': 'command_along_ray_only_on_hit', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines if the command specified in the `command_along_ray` field should be executed only if the ray-cast has hit a block/entity.'}], 'origins:remove_power': [], 'origins:replace_inventory': [{'name': 'inventory_type', 'type': [{'is_array': False, 'type': 'Inventory Type'}], 'default': '"inventory"', 'description': 'Determines whether to replace the items from the inventory of the entity or the inventory of a power present in the entity.'}, {'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the entity **before** the items are replaced.'}, {'name': 'item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the affected items **after** the affected items are replaced.'}, {'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, only items which fulfill this condition will be replaced.'}, {'name': 'slot', 'type': [{'is_array': False, 'type': 'Item Slot'}], 'default': '_optional_', 'description': 'If specified, only items in the designated slot will be replaced.'}, {'name': 'slots', 'type': [{'is_array': True, 'type': 'Item Slot'}], 'default': '_optional_', 'description': 'If specified, only items in the designated slots will be replaced.'}, {'name': 'power', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, the items in the inventory of this power will be replaced instead of the items in the entity\'s inventory if `inventory_type` is set to `"power"`.'}, {'name': 'stack', 'type': [{'is_array': False, 'type': 'Item Stack'}], 'default': '', 'description': 'The item to use as a replacement for the affected items.'}, {'name': 'merge_nbt', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines whether to merge the NBTs of the item that will be replaced and the NBTs of the item that will be used as a replacement.'}], 'origins:revoke_advancement': [{'name': 'advancement', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'The namespace and ID of the advancement to be revoked from the player.'}, {'name': 'criteria', 'type': [{'is_array': True, 'type': 'String'}], 'default': '_optional_', 'description': 'If specified, determines the criteria to revoke from the specified advancement.'}, {'name': 'criterion', 'type': [{'is_array': False, 'type': 'String'}], 'default': '_optional_', 'description': 'If specified, determines the criterion to revoke from the specified advancement.'}, {'name': 'selection', 'type': [{'is_array': False, 'type': 'String'}], 'default': '_optional_', 'description': 'Determines how to select the parent advancement(s) or child(ren) advancement(s) of the specified advancement. Can be one of: `"only"`, `"through"`, `"from"`, `"until"`, `"everything"`'}], 'origins:revoke_all_powers': [], 'origins:revoke_power': [{'name': 'power', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the power to be revoked from the entity.'}, {'name': 'source', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the source of the power.'}], 'origins:riding_action': [{'name': 'action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the entity being ridden.'}, {'name': 'bientity_action', 'type': [{'is_array': False, 'type': 'Bi-entity Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on either the 'actor' (the passenger entity) or the 'target' (the entity being ridden) or both."}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, only execute the specified actions if this condition is fulfilled by either the 'actor' (the passenger entity) or the 'target' (entity being ridden) or both."}, {'name': 'recursive', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'If set to `true`, the specified action(s) will be executed on all entities that are being ridden.'}], 'origins:selector_action': [{'name': 'selector', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'The selector to use for selecting entities. It can be the username of a player, the UUID of the entity or a target selector.'}, {'name': 'bientity_action', 'type': [{'is_array': False, 'type': 'Bi-entity Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on either or both the '**actor**' and '**target**' entities."}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified action will only be executed if this condition is fulfilled by either or both the '**actor**' and '**target**' entities."}], 'origins:set_fall_distance': [{'name': 'fall_distance', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The desired fall distance value.'}], 'origins:set_on_fire': [{'name': 'duration', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The amount of seconds the entity should burn.'}], 'origins:spawn_effect_cloud': [{'name': 'radius', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '3.0', 'description': 'The radius of the cloud.'}, {'name': 'radius_on_use', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '-0.5', 'description': 'How much the radius should change when an effect is applied.'}, {'name': 'wait_time', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '10', 'description': 'How many ticks to wait until the cloud takes effect.'}, {'name': 'effect', 'type': [{'is_array': False, 'type': 'Status Effect Instance'}], 'default': '_optional_', 'description': 'If specified, this status effect will be applied by the cloud to entities inside of it.'}, {'name': 'effects', 'type': [{'is_array': True, 'type': 'Status Effect Instance'}], 'default': '_optional_', 'description': 'If specified, these status effects will be applied by the cloud to entities inside of it.'}], 'origins:spawn_entity': [{'name': 'entity_type', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the entity type that will be spawned.'}, {'name': 'tag', 'type': [{'is_array': False, 'type': 'NBT'}], 'default': '_optional_', 'description': 'If specified, this NBT data will be applied to the entity that will be spawned.'}, {'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, the specified entity action type will be executed on the entity that will be spawned when it is spawned.'}, {'name': 'bientity_action', 'type': [{'is_array': False, 'type': 'Bi-Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this bi-entity action will be executed on either or both the actor (the entity that invoked the entity action) and the target (the spawned entity).'}], 'origins:spawn_particles': [{'name': 'particle', 'type': [{'is_array': False, 'type': 'Particle Effect'}], 'default': '', 'description': 'The particle type that will be spawned.'}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '*optional*', 'description': 'If specified, the particle will only be visible if this bi-entity condition is fulfilled by either or both the entity that has the power and the entity looking at the entity that has the power.'}, {'name': 'count', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'How much of the specified particle type will be spawned.'}, {'name': 'speed', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '0.0', 'description': 'Determines the speed of the specified particle type.'}, {'name': 'force', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'If set to `true`, the specified particle type that will be spawned can be seen from a far distance.'}, {'name': 'spread', 'type': [{'is_array': False, 'type': 'Vector'}], 'default': '{"x": 0.5, "y": 0.5, "z": 0.5}', 'description': 'Determines the size of the three-dimensional cuboid volume to spawn the specified particle type in.'}, {'name': 'offset_x', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '0.0', 'description': 'The offset of where the particle will be centered in the X axis.'}, {'name': 'offset_y', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '0.5', 'description': 'The offset of where the particle will be centered in the Y axis.'}, {'name': 'offset_z', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '0.0', 'description': 'The offset of where the particle will be centered in the Z axis.'}], 'origins:swing_hand': [{'name': 'hand', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"MAIN_HAND"', 'description': 'Determines which hand is swung. Accepts either `"MAIN_HAND"`, `"OFF_HAND"`'}], 'origins:toggle': [{'name': 'power', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the power that uses the [Toggle (Power Type)](../power_types/toggle.md).'}], 'origins:trigger_cooldown': [{'name': 'power', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the power that will be triggered.'}]}
bientity_actions = {'origins:actor_action': [{'name': 'action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '', 'description': 'The entity action type to execute on the actor entity.'}], 'origins:add_to_set': [], 'origins:add_velocity': [{'name': 'x', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '0.0', 'description': 'The amount of velocity to add on the x-axis.'}, {'name': 'y', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '0.0', 'description': 'The amount of velocity to add on the y-axis.'}, {'name': 'z', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '0.0', 'description': 'The amount of velocity to add on the z-axis.'}, {'name': 'reference', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"position"', 'description': 'Determines whether to use the target entity\'s `"position"` or `"rotation"` when calculating the velocity that will be applied to the target entity.'}, {'name': 'client', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'If this is false, the action will not execute on the client.'}, {'name': 'server', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'If this is false, the action will not execute on the server.'}, {'name': 'set', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'If this is true, the action will act as a "set" velocity action, overriding the entity\'s current velocity instead of adding to it.'}], 'origins:damage': [{'name': 'amount', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The amount of damage to deal.'}, {'name': 'source', 'type': [{'is_array': False, 'type': 'Damage Source'}], 'default': '<span style="color:darkred"><b>DEPRECATED</b></span>', 'description': 'Use `damage_type` instead. See [Damage Source (Data Type)](../data_types/damage_source.md) for more details.'}, {'name': 'damage_type', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'Defines the properties of the damage source that will be dealt, such as part of its death message, and whether it can bypass armor, shield, etc. (via damage type tags.)'}, {'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': "If specified, this modifier will be applied to the damage taken by the '**target**' entity."}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': "If specified, these modifiers will be applied to the damage taken by the '**target**' entity."}], 'origins:invert': [{'name': 'action', 'type': [{'is_array': False, 'type': 'Bi-entity Action Type'}], 'default': '', 'description': "The bi-entity action to execute which will have its 'target' and 'actor' contexts swapped."}], 'origins:mount': [], 'origins:remove_from_set': [], 'origins:set_in_love': [], 'origins:tame': [], 'origins:target_action': [{'name': 'action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '', 'description': 'The entity action type to execute on the target entity.'}]}
block_actions = {'origins:add_block': [{'name': 'block', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the block to place.'}], 'origins:area_of_effect': [{'name': 'radius', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '16', 'description': 'Determines the radius of the area.'}, {'name': 'shape', 'type': [{'is_array': False, 'type': 'Shape'}], 'default': '"cube"', 'description': 'Determines the shape of the area.'}, {'name': 'block_action', 'type': [{'is_array': False, 'type': 'Block Action Type'}], 'default': '', 'description': 'The block action to execute on the blocks within the specified radius.'}, {'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '*optional*', 'description': 'If specified, the specified block action will only be executed on blocks that fulfill this block condition.'}], 'origins:bonemeal': [{'name': 'effects', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines if the particle and other visual effects of the bonemeal-ing action should appear.'}], 'origins:execute_command': [{'name': 'command', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'The command to execute.'}], 'origins:explode': [{'name': 'power', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'Determines the power of the explosion.'}, {'name': 'destruction_type', 'type': [{'is_array': False, 'type': 'Destruction Type'}], 'default': '"break"', 'description': 'Determines the effect of the explosion to the terrain.'}, {'name': 'indestructible', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If specified, the blocks that fulfill this condition will not be destroyed by the summoned explosion.'}, {'name': 'destructible', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If specified, only the blocks that fulfill this condition will be destroyed by the summoned explosion.'}, {'name': 'create_fire', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines if the summoned explosion should create fire.'}], 'origins:modify_block_state': [{'name': 'property', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'The name of the property that will be modified. Examples are `facing` or `age`. See [Minecraft Wiki: Block States (List of block states)](https://minecraft.wiki/w/Block_states#List_of_block_states) for possible values.'}, {'name': 'operation', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"add"', 'description': 'Determines how the value specified in the `change` field is operated on the specified property. Accepts `"add"` or `"set"`.'}, {'name': 'change', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '_optional_', 'description': 'If specified, the value to add, remove or set to/from the specified property if the specified property is an integer.'}, {'name': 'value', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': '_optional_', 'description': 'If specified, the boolean to use as the new value for the specified property if the specified property is a boolean.'}, {'name': 'enum', 'type': [{'is_array': False, 'type': 'String'}], 'default': '_optional_', 'description': 'If specified, the string to use as the new value for the specified property if the specified property is a string.'}, {'name': 'cycle', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'If set to true, changes the property to the next state in the cycle, ignoring all other optional fields. All property types can use this operation.'}], 'origins:offset': [{'name': 'action', 'type': [{'is_array': False, 'type': 'Block Action Type'}], 'default': '', 'description': 'The action to apply with the given offset.'}, {'name': 'x', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'How much to offset the position on the x-axis.'}, {'name': 'y', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'How much to offset the position on the y-axis.'}, {'name': 'z', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'How much to offset the position on the z-axis.'}], 'origins:set_block': [{'name': 'block', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the block to place.'}], 'origins:spawn_entity': []}
item_actions = {'origins:consume': [{'name': 'amount', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'The amount of items to remove.'}], 'origins:damage': [{'name': 'amount', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'The amount of damage it should do to the item stack.'}, {'name': 'ignore_unbreaking', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines if this action should ignore the Unbreaking enchantment.'}], 'origins:holder_action': [], 'origins:merge_nbt': [{'name': 'nbt', 'type': [{'is_array': False, 'type': 'NBT'}], 'default': '', 'description': "The NBT to merge to the item's NBT."}], 'origins:modify': [{'name': 'modifier', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The ID of an item modifier.'}], 'origins:remove_enchantment': [{'name': 'enchantment', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, this enchantment will be removed from the item.'}, {'name': 'enchantments', 'type': [{'is_array': True, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, these enchantments will be removed from the item.'}, {'name': 'levels', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '_optional_', 'description': 'If specified, only the enchantments that has the specified level will be removed from the item.'}, {'name': 'reset_repair_cost', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': "Determines whether the 'repair cost' of the item should be reset."}]}
meta_actions = {
    'origins:and': [{'name': 'actions', 'type': [{'is_array': True, 'type': 'Action Type'}], 'default': '', 'description': 'These actions will be executed one after the other (but in the same tick).'}], 
    'origins:chance': [{'name': 'action', 'type': [{'is_array': False, 'type': 'Action Type'}], 'default': '', 'description': 'The action which might be executed.'}, {'name': 'chance', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance).'}, {'name': 'fail_action', 'type': [{'is_array': False, 'type': 'Action Type'}], 'default': '_optional_', 'description': 'The action to execute if the specified action in the `action` field is not executed.'}], 
    'origins:choice': [{'name': 'actions', 'type': [{'is_array': True, 'type': 'Object'}], 'default': '', 'description': 'Each object has to have an `element` [Action](../action_types.md) and a `weight` [Integer](../data_types/integer.md).'}], 
    'origins:delay': [{'name': 'action', 'type': [{'is_array': False, 'type': 'Action Type'}], 'default': '', 'description': 'The action which will be executed after the delay.'}, {'name': 'ticks', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The amount of ticks until the action is executed.'}], 
    'origins:if_else': [{'name': 'condition', 'type': [{'is_array': False, 'type': 'Condition Type'}], 'default': '', 'description': 'A condition based on the type of action.'}, {'name': 'if_action', 'type': [{'is_array': False, 'type': 'Action Type'}], 'default': '', 'description': 'The action which is executed when the condition evaluates to true.'}, {'name': 'else_action', 'type': [{'is_array': False, 'type': 'Action Type'}], 'default': '_optional_', 'description': 'If present, this action will be executed when the condition evaluates to false.'}],
    'origins:if_else_list': [{'name': 'actions', 'type': [{'is_array': True, 'type': 'Object'}], 'default': '', 'description': 'Each object has to have an `action` [Action Type](../action_types.md) object and a `condition` [Condition Type](../condition_types.md) object.'}], 
    'origins:nothing': [], 
    'origins:side': [{'name': 'action', 'type': [{'is_array': False, 'type': 'Action Type'}], 'default': '', 'description': 'The action to execute.'}, {'name': 'side', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'Determines where to execute the specified action type. Accepts `"client"` or `"server"`'}]}