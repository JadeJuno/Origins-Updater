entity_conditions = {'origins:ability': [{'name': 'ability', 'type': [{'is_array': False, 'type': 'Player Ability'}], 'default': '', 'description': 'The namespace and ID of the ability to check for.'}], 'origins:advancement': [{'name': 'advancement', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the advancement the player needs to have completed in order for this condition to evaluate to true.'}], 'origins:air': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the breath / air / bubble (in ticks) the entity has should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The value at which the breath / air / bubble (in ticks) the entity has will be compared to.'}], 'origins:attribute': [{'name': 'attribute', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'ID of the attribute of which the value should be checked. See [Minecraft Wiki: Attribute (Attributes)](https://minecraft.wiki/w/Attribute#Attributes) for a list of vanilla attributes that can be checked for.'}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': "Determines how the attribute's total value should be compared to the specified value."}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': "The value at which the attribute's total value will be compared to."}], 'origins:biome': [{'name': 'biome', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, only evaluate the condition to true if the biome the entity is in matches the specified namespace and ID.'}, {'name': 'biomes', 'type': [{'is_array': True, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, only evaluate the condition to true if the biome the entity is in matches one of the specified namespace and IDs.'}, {'name': 'condition', 'type': [{'is_array': False, 'type': 'Biome Condition Type'}], 'default': '_optional_', 'description': 'If specified, only evaluate the condition to true if the biome the entity is in fulfills the specified biome condition type.'}], 'origins:block_collision': [{'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If specified, the condition type will only evaluate to true if the bounding box of the entity is colliding with a block that fulfills this condition.'}, {'name': 'offset_x', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '0', 'description': 'By how much of the bounding box size should the box be offset in the X direction (e.g.: 0 = no offset, 1 = offset of exact width, 2 = offset of twice the width of the bounding box)'}, {'name': 'offset_y', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '0', 'description': 'By how much of the bounding box size should the box be offset in the Y direction (e.g.: 0 = no offset, 1 = offset of exact height, 2 = offset of twice the height of the bounding box)'}, {'name': 'offset_z', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '0', 'description': 'By how much of the bounding box size should the box be offset in the Z direction (e.g.: 0 = no offset, 1 = offset of exact depth, 2 = offset of twice the depth of the bounding box)'}], 'origins:block_in_radius': [{'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '', 'description': 'The block condition type to check for.'}, {'name': 'radius', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The radius of the area to check how many blocks fulfill the `block_condition`.'}, {'name': 'shape', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"cube"', 'description': 'Determines the shape of the radius. Accepts `"cube"`, `"star"` or `"sphere"`.'}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '">="', 'description': 'Determines how the amount of blocks which fulfill `block_condition` block condition should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'The value at which the amount of blocks which fulfill `block_condition` will be compared to.'}], 'origins:brightness': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the calculated brightness value should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the calculated brightness value will be compared to.'}], 'origins:climbing': [], 'origins:collided_horizontally': [], 'origins:command': [{'name': 'command', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'The command to execute.'}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the result value (an integer) of the executed command should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The value at which the result value (an integer) of the executed command will be compared to.'}], 'origins:creative_flying': [], 'origins:daytime': [], 'origins:dimension': [{'name': 'dimension', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the dimension the player needs to be in for this condition to evaluate to true. Vanilla dimensions are `minecraft:overworld`, `minecraft:the_nether` and `minecraft:the_end`, but namespace and IDs of custom/modded dimensions should also work.'}], 'origins:distance_from_coordinates': [{'name': 'reference', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"world_origin"', 'description': 'The point to compare the distance to. Accepts `"world_origin"` or `"world_spawn"`.'}, {'name': 'offset', 'type': [{'is_array': False, 'type': 'Vector'}], 'default': '_optional_', 'description': 'If specified, determines how much the reference point should be offset.'}, {'name': 'ignore_x', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines whether to consider the X axis to be 0.'}, {'name': 'ignore_y', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines whether to consider the Y axis to be 0.'}, {'name': 'ignore_z', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines whether to consider the Z axis to be 0.'}, {'name': 'shape', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"cube"', 'description': 'Determines the shape of the check. Accepts `"cube"`, `"star"` or `"sphere"`.'}, {'name': 'scale_reference_to_dimension', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines whether to check for the reference point whilst considering the coordinate scale of the dimension.'}, {'name': 'result_on_the_wrong_dimension', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': '_optional_', 'description': "If specified, this value will override the result of the comparison if the entity being tested is not in the reference's dimension."}, {'name': 'round_to_digit', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '_optional_', 'description': 'If specified, rounds the result to the closest number with the specified amount of digits after the comma. Negative numbers also work (e.g: `-2` rounds to multiples of 100).'}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the calculated distance should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the calculated distance is compared to.'}], 'origins:elytra_flight_possible': [{'name': 'check_state', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'If set to `true`, the entity condition type will check if pressing the `key.jump` keybind would activate elytra flight if the player had the ability to.'}, {'name': 'check_abilities', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'If set to `true`, the entity condition type will check whether the player has the ability to activate elytra flight. (e.g: wearing an elytra or have a power that uses the [Elytra Flight (Power Type)](../power_types/elytra_flight.md))'}], 'origins:enchantment': [{'name': 'enchantment', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the enchantment of interest.'}, {'name': 'calculation', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"sum"', 'description': "Which number to compare - either the `sum` of levels of this enchantment on all of the player's equipment, or the `max` level of this enchantment on any of the player's equipment."}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the level of the specified enchantment should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The value at which the level of the specified enchantment will be compared to.'}], 'origins:entity_group': [{'name': 'group', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'Entity group required for the entity to pass the check. One of `default`, `undead`, `arthropod`, `illager` and `aquatic`.'}], 'origins:entity_type': [{'name': 'entity_type', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the entity type the entity needs to have to pass the check.'}], 'origins:equipped_item': [{'name': 'equipment_slot', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'Determines which equipment slot to check for the item. Accepts `"mainhand"`, `"offhand"`, `"head"`, `"chest"`, `"legs"`, `"feet"`.'}, {'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '', 'description': 'The item condition type to check for on the item in the specified equipment slot.'}], 'origins:exists': [], 'origins:exposed_to_sky': [], 'origins:exposed_to_sun': [], 'origins:fall_distance': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the fall distance of the entity should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the fall distance of the entity will be compared to.'}], 'origins:fall_flying': [], 'origins:fluid_height': [{'name': 'fluid', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the fluid tag of which the height should be checked. Most important examples: `minecraft:water` and `minecraft:lava`.'}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the height of the fluid should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the height of the fluid will be compared to.'}], 'origins:food_level': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the food level of the player should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the food level of the player will be compared to.'}], 'origins:gamemode': [{'name': 'gamemode', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'Name of the gamemode the player should have in order for this condition to evaluate to true.'}], 'origins:glowing': [], 'origins:health': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the current health of the entity should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the current health of the entity will be compared to.'}], 'origins:inventory': [{'name': 'inventory_types', 'type': [{'is_array': True, 'type': 'Inventory Type'}], 'default': '["inventory"]', 'description': "Determines whether to check for items in the entity's inventory, inventories of powers present in the entity, or both."}, {'name': 'process_mode', 'type': [{'is_array': False, 'type': 'Process Mode'}], 'default': '"items"', 'description': 'Determines how the item stacks in the specified inventory/inventories are evaluated.'}, {'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, only account for items from the specified inventory/inventories that fulfill this condition.'}, {'name': 'slots', 'type': [{'is_array': True, 'type': 'Item Slot'}], 'default': '_optional_', 'description': 'If specified, only items from these specified item slots are evaluated.'}, {'name': 'slot', 'type': [{'is_array': False, 'type': 'Item Slot'}], 'default': '_optional_', 'description': 'If specified, only the item from this specified item slot is evaluated.'}, {'name': 'power', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified and if `inventory_type` is `"power"`, the items in the inventory of this power will be evaluated instead.'}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '">"', 'description': 'Determines how the amount of items/stacks that were evaluated should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'The value at which the amount of items/stacks that were evaluated will be compared to.'}], 'origins:invisible': [], 'origins:in_block': [{'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '', 'description': "The block condition type to check for on the block that is overlapping with the entity's feet."}], 'origins:in_block_anywhere': [{'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '', 'description': 'The block condition type which blocks need to fulfill in order to count for this condition.'}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '">="', 'description': 'Determines how the amount of blocks which overlap and fulfill `block_condition` should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'The value at which the amount of blocks which overlap and fulfill `block_condition` will be compared to.'}], 'origins:in_rain': [], 'origins:in_snow': [], 'origins:in_tag': [{'name': 'tag', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the entity type tag the entity type needs to be in to pass the check.'}], 'origins:in_thunderstorm': [], 'origins:living': [], 'origins:moving': [{'name': 'horizontally', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines whether to check if the entity is moving horizontally.'}, {'name': 'vertically', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines whether to check if the entity is moving vertically.'}], 'origins:nbt': [{'name': 'nbt', 'type': [{'is_array': False, 'type': 'NBT'}], 'default': '', 'description': 'The NBT data to check for.'}], 'origins:on_block': [{'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': "If specified, the condition will evaluate to true if the block underneath the entity's feet fulfills the specified block condition type. Otherwise, only check if the entity is on the ground."}], 'origins:on_fire': [], 'origins:origin': [{'name': 'origin', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the origin the entity needs to have to pass the check.'}, {'name': 'layer', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, the condition will check if the origin is from the specified origin layer.'}], 'origins:passenger': [{'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, only increase the amount of passengers if either or both the '**actor**' entity/entities and the '**target**' entity fulfills this bi-entity condition."}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '">="', 'description': 'How the amount of passengers of the entity should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'The value at which the amount of passengers of the entity will be compared to.'}], 'origins:passenger_recursive': [{'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, only increase the amount of passengers if either or both the '**actor**' entity/entities and the '**target**' entity fulfills this bi-entity condition."}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '">="', 'description': "Determines how the amount of passengers (including the passengers' passengers) of the entity should be compared to the specified value."}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': "The value at which the amount of passengers (including the passengers' passengers) of the entity will be compared to."}], 'origins:power': [{'name': 'power', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the power the entity needs to have to pass the check.'}, {'name': 'source', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, the condition will check if the power is from the specified power source.'}], 'origins:power_active': [{'name': 'power', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the power which will be checked for being active.'}], 'origins:power_type': [{'name': 'power_type', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the [Power Type](../power_types.md) of a power the entity has.'}], 'origins:predicate': [{'name': 'predicate', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the predicate the entity needs to pass.'}], 'origins:raycast': [{'name': 'distance', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '_optional_', 'description': 'Determines the maximum distance the ray-cast will travel.'}, {'name': 'block', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines whether the ray-cast should include blocks.'}, {'name': 'entity', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines whether the ray-cast should include entities.'}, {'name': 'shape_type', 'type': [{'is_array': False, 'type': 'Shape Type'}], 'default': '"visual"', 'description': 'Determines how the ray-cast will handle blocks.'}, {'name': 'fluid_handling', 'type': [{'is_array': False, 'type': 'Fluid Handling'}], 'default': '"any"', 'description': 'Determines how the ray-cast will handle fluids.'}, {'name': 'space', 'type': [{'is_array': False, 'type': 'Space'}], 'default': '"world"', 'description': 'Determines how the direction will be calculated. <span style="color: goldenrod;"><b>Only used if <code>direction</code> is specified.</b></span>'}, {'name': 'direction', 'type': [{'is_array': False, 'type': 'Vector'}], 'default': '_optional_', 'description': 'If specified, determines the direction of the raycast. Otherwise, defaults to the direction at the entity is facing (as if `space` is `"local"`.)'}, {'name': 'match_bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the entity condition type will check if this bi-entity condition type is fulfilled by either or both the 'actor' (the entity being checked by the entity condition type) and 'target' (entity that the ray-cast has gone through). If not, the entity will be ignored."}, {'name': 'hit_bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the entity condition type will check if this bi-entity condition type is fulfilled by either or both the 'actor' (the entity being checked by the entity condition type) and 'target' (the entity that has hit by the ray-cast)."}, {'name': 'entity_distance', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '_optional_', 'description': "Determines the distance of the raycast for entities if `entity` is set to `true`. If absent, it will use the higher value between the entity's attack range (with Reach Entity Attributes compatibility) or the `distance` field."}, {'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If specified, the entity condition type will check if the block that was hit by the ray-cast fulfills this block condition type.'}, {'name': 'block_distance', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '_optional_', 'description': "Determines the distance of the raycast for blocks if `block` is set to `true`. If absent, it will use the higher value between the entity's block reach (with Reach Entity Attributes compatibility) or the `distance` field."}], 'origins:relative_health': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the relative health of the entity should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the relative health of the entity will be compared to.'}], 'origins:resource': [{'name': 'resource', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of a power that will be evaluated.'}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the value of the specified power should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The value at which the value of the specified power will be compared to.'}], 'origins:riding': [{'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, this condition type will only evaluate to true if this condition is fulfilled by either or both the '**actor**' and '**target**' entities."}], 'origins:riding_recursive': [{'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, this condition type will only evaluate to true if this condition is fulfilled by either or both the '**actor**' and '**target**' entities."}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '">="', 'description': 'Determines how the amount of entities currently being ridden should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'The value at which the amoutn of entities currently being ridden will be compared to.'}], 'origins:riding_root': [{'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, this condition type will only evaluate to true if this condition is fulfilled by either or both the '**actor**' and '**target**' entities."}], 'origins:saturation_level': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the saturation level of the player should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the saturation level of the player will be compared to.'}], 'origins:scoreboard': [{'name': 'name', 'type': [{'is_array': False, 'type': 'String'}], 'default': '_optional_', 'description': 'If specified, the condition will check for the score of this score holder.'}, {'name': 'objective', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'The name of the scoreboard objective to retrieve the value from and compare.'}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the score of the specified score holder should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The value at which the score of the specified score holder will be compared to.'}], 'origins:set_size': [], 'origins:sneaking': [], 'origins:sprinting': [], 'origins:status_effect': [{'name': 'effect', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the status effect to check for.'}, {'name': 'min_amplifier', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'The minimum amplifier the status effect should have in order to pass the check.'}, {'name': 'max_amplifier', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '2147483647', 'description': 'The maximum amplifier the status effect should have in order to pass the check.'}, {'name': 'min_duration', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '-1', 'description': 'The minimum duration in ticks the status effect should have left in order to pass the check.'}, {'name': 'max_duration', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '2147483647', 'description': 'The maximum duration in ticks the status effect should have left in order to pass the check.'}], 'origins:submerged_in': [{'name': 'fluid', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the fluid tag that should be checked. Most important examples: `minecraft:water` and `minecraft:lava`.'}], 'origins:swimming': [], 'origins:tamed': [], 'origins:time_of_day': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the current day time ticks of the world should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The value at which the current day time ticks of the world will be compared to.'}], 'origins:using_effective_tool': [], 'origins:using_item': [{'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, the condition will only evaluate to true if the item that is being used fulfills the specified item condition type.'}], 'origins:xp_levels': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the experience level of the player should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The value at which the experience level of the player will be compared to.'}], 'origins:xp_points': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the experience points of the player should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The value at which the experience points of the player will be compared to.'}]}
bientity_conditions = {'origins:actor_condition': [{'name': 'condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '', 'description': 'The entity condition type to check for on the acting entity.'}], 'origins:attacker': [], 'origins:attack_target': [], 'origins:both': [{'name': 'condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '', 'description': 'The entity condition type to check on both the actor and target entity.'}], 'origins:can_see': [{'name': 'shape_type', 'type': [{'is_array': False, 'type': 'Shape Type'}], 'default': '"visual"', 'description': 'Determines how the ray-cast will handle blocks.'}, {'name': 'fluid_handling', 'type': [{'is_array': False, 'type': 'Fluid Handling'}], 'default': '"none"', 'description': 'Determines how the ray-cast will handle fluids.'}], 'origins:distance': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the distance (in blocks) between the actor and target entities should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the distance (in blocks) between the actor and target entities will be compared to.'}], 'origins:either': [{'name': 'condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '', 'description': 'The entity condition type to check on either actor or target entities.'}], 'origins:equal': [], 'origins:invert': [{'name': 'condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '', 'description': "The bi-entity condition type to check which will have its 'target' and 'actor' contexts swapped."}], 'origins:in_set': [], 'origins:owner': [], 'origins:relative_rotation': [{'name': 'axes', 'type': [{'is_array': True, 'type': 'String'}], 'default': '["x", "y", "z"]', 'description': 'The axes to get the angle values to calculate, and compare to.'}, {'name': 'actor_rotation', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"head"', 'description': 'Determines the initial point of the rotation for the actor. Accepts `"head"` or `"body"`.'}, {'name': 'target_rotation', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"body"', 'description': 'Determines the initial point of the rotation for the target. Accepts `"head"` or `"body"`.'}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the calculated angle value should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the calculated angle value will be compared to.'}], 'origins:riding': [], 'origins:riding_recursive': [], 'origins:riding_root': [], 'origins:target_condition': [{'name': 'condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '', 'description': 'The entity condition type to check for on the target entity.'}], 'origins:undirected': [{'name': 'condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '', 'description': 'The bi-entity condition type to check for.'}]}
block_conditions = {'origins:adjacent': [{'name': 'adjacent_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '', 'description': 'The block condition that needs to be fulfilled by adjacent blocks to count towards this condition.'}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the number of adjacent blocks which fulfill the `adjacent_condition` block condition should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the number of adjacent blocks which fulfill `adjacent_condition` will be compared to.'}], 'origins:attachable': [], 'origins:blast_resistance': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the blast resistance of the block should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the blast resistance value of the block will be compared to.'}], 'origins:block': [{'name': 'block', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the block that this block needs to be to pass the check.'}], 'origins:block_entity': [], 'origins:block_state': [{'name': 'property', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'The name of the property that will be checked. Examples are `facing` or `age`. See: [Minecraft Wiki: Block States (List of block states)](https://minecraft.wiki/w/Block_states#List_of_block_states)'}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '_optional_', 'description': 'If specified and if the property uses an integer, determines how the integer value of the specified property should be compared to the specified value. <span style="color: goldenrod;"><b>Only used if the specified property has an [integer](../data_types/integer.md) value.</b></span>'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '_optional_', 'description': 'If specified, the itneger at which the integer value of the specified property will be compared to. <span style="color: goldenrod;"><b>Only used if the specified property has an [integer](../data_types/integer.md) value.</b></span>'}, {'name': 'value', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': '_optional_', 'description': 'If specified, the boolean to compare to the boolean value of the specified property. <span style="color: goldenrod;"><b>Only used if the specified property has a [boolean](../data_types/boolean.md) value.</b></span>'}, {'name': 'enum', 'type': [{'is_array': False, 'type': 'String'}], 'default': '_optional_', 'description': 'If specified, the string at which the string value of the specified property will be compared to. <span style="color: goldenrod;"><b>Only used if the specified property has a [string](../data_types/string.md) value.</b></span>'}], 'origins:command': [{'name': 'command', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'The command to execute.'}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the result value (an integer) of the executed command should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The value at which the result value (an integer) of the executed command will be compared to.'}], 'origins:distance_from_coordinates': [{'name': 'reference', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"world_origin"', 'description': 'The point to compare the distance to. Accepts `"world_origin"` or `"world_spawn"`.'}, {'name': 'offset', 'type': [{'is_array': False, 'type': 'Vector'}], 'default': '_optional_', 'description': 'If specified, determines how much the reference point should be offset.'}, {'name': 'ignore_x', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines whether to consider the X axis to be 0.'}, {'name': 'ignore_y', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines whether to consider the Y axis to be 0.'}, {'name': 'ignore_z', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines whether to consider the Z axis to be 0.'}, {'name': 'shape', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"cube"', 'description': 'Determines the shape of the check. Accepts `"cube"`, `"star"` or `"sphere"`.'}, {'name': 'scale_reference_to_dimension', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines whether to check for the reference point whilst considering the coordinate scale of the dimension.'}, {'name': 'result_on_the_wrong_dimension', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': '_optional_', 'description': "If specified, this value will override the result of the comparison if the block being tested is not in the reference's dimension."}, {'name': 'round_to_digit', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '_optional_', 'description': 'If specified, rounds the result to the closest number with the specified amount of digits after the comma. Negative numbers also work (e.g: `-2` rounds to multiples of 100).'}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the calculated distance (in blocks) should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the calculated distance (in blocks) will be compared to.'}], 'origins:exposed_to_sky': [], 'origins:fluid': [{'name': 'fluid_condition', 'type': [{'is_array': False, 'type': 'Fluid Condition Type'}], 'default': '', 'description': 'The fluid condition type to check the fluid state at the position.'}], 'origins:hardness': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the hardness value of the block should compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the hardness value of the block will be compared to.'}], 'origins:height': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the Y position of the block should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the Y position of the block will be compared to.'}], 'origins:in_tag': [{'name': 'tag', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the tag which the block should be in to pass the check.'}], 'origins:light_blocking': [], 'origins:light_level': [{'name': 'light_type', 'type': [{'is_array': False, 'type': 'String'}], 'default': '_optional_', 'description': 'If specified, determines the type of light level to compare. Accepts `"sky"` or `"block"`.'}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the light level should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The value at which the light level will be compared to.'}], 'origins:material': [{'name': 'material', 'type': [{'is_array': False, 'type': 'Material'}], 'default': '_optional_', 'description': 'If specified, checks if the block classifies as this material.'}, {'name': 'materials', 'type': [{'is_array': True, 'type': 'Material'}], 'default': '_optional_', 'description': 'If specified, checks if the block classifies as one of these materials.'}], 'origins:movement_blocking': [], 'origins:nbt': [{'name': 'nbt', 'type': [{'is_array': False, 'type': 'NBT'}], 'default': '', 'description': 'The NBT data to check for.'}], 'origins:offset': [{'name': 'condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '', 'description': 'The condition to check with the given offset.'}, {'name': 'x', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'How much to offset the position on the x-axis.'}, {'name': 'y', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'How much to offset the position on the y-axis.'}, {'name': 'z', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'How much to offset the position on the z-axis.'}], 'origins:replacable': [], 'origins:slipperiness': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the slipperiness value of the block should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the slipperiness value of the block will be compared to.'}], 'origins:water_loggable': []}
biome_conditions = {'origins:category': [{'name': 'category', 'type': [{'is_array': False, 'type': 'Biome Category'}], 'default': '', 'description': 'Which category the biome must be in order to succeed the check.'}], 'origins:high_humidity': [], 'origins:in_tag': [{'name': 'tag', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the tag which the biome should be in to pass the check.'}], 'origins:precipitation': [{'name': 'precipitation', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'Which precipitation the biome has to have in order to succeed the check. Accepts `"none"`, `"rain"` or `"snow"`. Due to limitations with the system, this will check precipitation at a world height of 64.'}], 'origins:temperature': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the temperature value of the biome should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the temperature value of the biome will be compared to.'}]}
damage_conditions = {'origins:amount': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the amount of damage should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the amount of damage will be compared to.'}], 'origins:attacker': [{'name': 'entity_condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '_optional_', 'description': 'If set, the attacker entity must fulfill the provided entity condition type in order for this condition to evaluate to true.'}], 'origins:bypasses_armor': [], 'origins:explosive': [], 'origins:fire': [], 'origins:from_falling': [], 'origins:in_tag': [{'name': 'tag', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the tag which the damage type should be in to pass the check.'}], 'origins:name': [{'name': 'name', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'Name the damage source should have to pass the check. See [List of Damage Source Names](../../misc/extras/damage_source_names.md) for possible values.'}], 'origins:out_of_world': [], 'origins:projectile': [{'name': 'projectile', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If set, the check will only pass if the projectile was of an entity type with the specified namespace and ID.'}, {'name': 'projectile_condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '_optional_', 'description': 'If set, the check will only pass if the projectile entity fulfills this condition.'}], 'origins:type': [], 'origins:unblockable': []}
item_conditions = {'origins:amount': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the amount of the item in the item stack should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The value at which the amount of the item in the item stack will be compared to.'}], 'origins:armor_value': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the armor value of the item should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The value at which the armor value of the item will be compared to.'}], 'origins:durability': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the durability value of the item should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The value at which the durability value of the item will be compared to.'}], 'origins:empty': [], 'origins:enchantable': [], 'origins:enchantment': [{'name': 'enchantment', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, the level of the enchantment that corresponds to this identifier will be compared. Otherwise, the amount of enchantments in the item stack will be compared instead.'}, {'name': 'use_modifications', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines whether to account for enchantments that were added/modified by unnatural means (e.g: via the [Modify Enchantment Level (Power Type)](../power_types/modify_enchantment_level.md).)'}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the level of the specified enchantment, or the amount of enchantments in the item stack, should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The value at which the level of the specified enchantment, or the amount of the enchantments in the item stack, will be compared to.'}], 'origins:fireproof': [], 'origins:food': [], 'origins:fuel': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '">"', 'description': 'Determines how the fuel time value (in ticks) of the item stack should be compared to a specific value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'The value at which the fuel time value (in ticks) of the item stack will be compared to.'}], 'origins:harvest_level': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the harvest level of the material from the item stack should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The value at which the harvest level of the material from the item stack will be compared to.'}], 'origins:has_power': [{'name': 'power', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The ID of the power to check for.'}, {'name': 'slot', 'type': [{'is_array': False, 'type': 'String'}], 'default': '_optional_', 'description': 'If specified, this will check if the power embedded to the item is assigned to this equipment slot. Accepts one of `"head"`, `"chest"`, `"legs"`, `"feet"`, `"mainhand"` or `"offhand"`.'}], 'origins:ingredient': [{'name': 'ingredient', 'type': [{'is_array': False, 'type': 'Ingredient'}], 'default': '', 'description': 'The ingredient this item must match to pass the check.'}], 'origins:is_damageable': [], 'origins:is_equippable': [], 'origins:meat': [], 'origins:nbt': [{'name': 'nbt', 'type': [{'is_array': False, 'type': 'NBT'}], 'default': '', 'description': 'The NBT data to check for.'}], 'origins:power_count': [{'name': 'slot', 'type': [{'is_array': False, 'type': 'String'}], 'default': '_optional_', 'description': 'If specified, this will check how many powers are assigned to this equipment slot. Accepts one of `"head"`, `"chest"`, `"legs"`, `"feet"`, `"mainhand"` or `"offhand"`.'}, {'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the amount of powers embedded in the item stack should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The value at which the amount of powers embedded in the item stack will be compared to.'}], 'origins:relative_durability': [{'name': 'comparison', 'type': [{'is_array': False, 'type': 'Comparison'}], 'default': '', 'description': 'Determines how the relative durability value of the item from the item stack should be compared to the specified value.'}, {'name': 'compare_to', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The value at which the relative durability value of the item from the item stack will be compared to.'}], 'origins:smeltable': []}
fluid_conditions = {'origins:empty': [], 'origins:in_tag': [{'name': 'tag', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'ID of the tag which the fluid should be in to pass the check.'}], 'origins:still': []}
meta_conditions = {'origins:and': [{'name': 'conditions', 'type': [{'is_array': True, 'type': 'Condition Type'}], 'default': '', 'description': 'All of these condition types have to be fulfilled in order for this condition to be fulfilled.'}], 'origins:chance': [], 'origins:constant': [{'name': 'value', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': '', 'description': 'If true, the condition is always fulfilled. If false, the condition is never fulfilled.'}], 'origins:not': [{'name': 'inverted', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'If true, the condition acts inverted.'}], 'origins:or': [{'name': 'conditions', 'type': [{'is_array': True, 'type': 'Condition Type'}], 'default': '', 'description': 'Any of these condition types have to be fulfilled in order for this condition to be fulfilled.'}]}