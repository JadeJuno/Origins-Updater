powers = {'origins:action_on_being_used': [{'name': 'bientity_action', 'type': [{'is_array': False, 'type': 'Bi-entity Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on either or both the '**actor**' and '**target**' entities."}, {'name': 'held_item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on the item used by the '**actor**' entity for right-clicking the '**target**' entity."}, {'name': 'result_item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on the item that is given to the '**actor**' entity."}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified actions will only be executed if this condition is fulfilled by either or both '**actor**' and '**target**' entities."}, {'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified actions will only be executed if this condition is fulfilled by the item used by the '**actor**' entity for right-clicking the '**target**' entity."}, {'name': 'hands', 'type': [{'is_array': True, 'type': 'String'}], 'default': '["off_hand", "main_hand"]', 'description': 'Determines if the power should be activated if the \'**actor**\' entity used the specified hand(s). Accepts `"off_hand"`, `"main_hand"` or both'}, {'name': 'result_stack', 'type': [{'is_array': False, 'type': 'Item Stack'}], 'default': '_optional_', 'description': "If specified, this item stack will be given to the '**actor**' entity."}, {'name': 'action_result', 'type': [{'is_array': False, 'type': 'Action Result'}], 'default': '"success"', 'description': "Determines the result of the 'use' action."}, {'name': 'priority', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'Determines the execution priority of the power.'}], 'origins:action_on_block_break': [{'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the player when a block is broken.'}, {'name': 'block_action', 'type': [{'is_array': False, 'type': 'Block Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the block that is broken.'}, {'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If set, the specified actions will only trigger when this block condition is met by the broken block.'}, {'name': 'only_when_harvested', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'If this is true, the specified actions will only execute when the player succeeds in harvesting the block (e.g. they will not trigger when stone is broken by hand).'}], 'origins:action_on_block_place': [], 'origins:action_on_block_use': [{'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this entity action type will be executed if all conditions are met.'}, {'name': 'block_action', 'type': [{'is_array': False, 'type': 'Block Action Type'}], 'default': '_optional_', 'description': 'If specified, the used block will run this action if all conditions are met.'}, {'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If specified, only execute the specified actions if this condition is fulfilled by the used block.'}, {'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': "If specified, only execute the specified actions if this condition is fulfilled by the item in the 'actor' (the player that has the power) entity's specified hand(s) determined by the `hands` string field."}, {'name': 'directions', 'type': [{'is_array': True, 'type': 'String'}], 'default': '["north", "east", "south", "west", "up", "down"]', 'description': 'If specified, only execute the specified actions if you used the specified face of the block.'}, {'name': 'hands', 'type': [{'is_array': True, 'type': 'String'}], 'default': '["off_hand", "main_hand"]', 'description': 'Determines if the power should be activated if the player used the specified hand(s). Accepts `"off_hand"`, `"main_hand"` or both.'}, {'name': 'result_stack', 'type': [{'is_array': False, 'type': 'Item Stack'}], 'default': '_optional_', 'description': "If specified, gives the item to the 'actor' (the player that has the power) entity."}, {'name': 'held_item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on the item used for right-clicking the 'target' entity in the specified hand(s) determined by the `hands` string field."}, {'name': 'result_item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on the item that is given to the 'actor' (the player that has the power) entity."}, {'name': 'action_result', 'type': [{'is_array': False, 'type': 'Action Result'}], 'default': '"success"', 'description': "Determines the result of the 'use' action."}], 'origins:action_on_callback': [{'name': 'entity_action_chosen', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the player after the player chooses an origin on all available origin layers.'}, {'name': 'execute_chosen_when_orb', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines whether the action in `entity_action_chosen` should be executed if the player also used an Orb of Origin item for choosing an origin.'}, {'name': 'entity_action_gained', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the player when the power is added to the entity for the first time.'}, {'name': 'entity_action_lost', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the player when the power is removed from the entity permanently.'}, {'name': 'entity_action_added', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the player when the power is added to the entity. Joining a world adds each power back.'}, {'name': 'entity_action_removed', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the player when the power is removed from the entity and right after the player respawns. Leaving a world removes each power.'}, {'name': 'entity_action_respawned', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the player right after the player respawns. This action will be executed after the action in `entity_action_removed`.'}], 'origins:action_on_death': [{'name': 'bientity_action', 'type': [{'is_array': False, 'type': 'Bi-entity Action Type'}], 'default': '', 'description': "The action to be executed on either or both the '**actor**' and '**target**' entities."}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified action will only be executed if this condition is fulfilled by either or both '**actor**' and '**target**' entities."}, {'name': 'damage_condition', 'type': [{'is_array': False, 'type': 'Damage Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified action will only be executed if this condition is fulfilled by the damage dealt by the '**actor**' entity."}], 'origins:action_on_entity_use': [{'name': 'bientity_action', 'type': [{'is_array': False, 'type': 'Bi-entity Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on either or both the '**actor**' and '**target**' entities."}, {'name': 'held_item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on the item used by the '**actor**' entity for right-clicking the '**target**' entity."}, {'name': 'result_item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on the item that is given to the '**actor**' entity."}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified actions will only be executed if this condition is fulfilled by either or both '**actor**' and '**target**' entities."}, {'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified actions will only be executed if this condition is fulfilled by the item used by the '**actor**' entity for right-clicking the '**target**' entity."}, {'name': 'hands', 'type': [{'is_array': True, 'type': 'String'}], 'default': '["off_hand" , "main_hand"]', 'description': 'Determines if the power should be activated if the \'**actor**\' entity used the specified hand(s). Accepts `"off_hand"`, `"main_hand"` or both'}, {'name': 'result_stack', 'type': [{'is_array': False, 'type': 'Item Stack'}], 'default': '_optional_', 'description': "If specified, this item stack will be given to the '**actor**' entity."}, {'name': 'action_result', 'type': [{'is_array': False, 'type': 'Action Result'}], 'default': '"success"', 'description': "Determines the result of the 'use' action."}, {'name': 'priority', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'Determines the execution priority of the power.'}], 'origins:action_on_hit': [{'name': 'bientity_action', 'type': [{'is_array': False, 'type': 'Bi-entity Action Type'}], 'default': '', 'description': "The action to be executed on either or both the '**actor**' or '**target**' entities."}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified action will only be executed if this condition is fulfilled by either or both '**actor**' and '**target**' entities."}, {'name': 'damage_condition', 'type': [{'is_array': False, 'type': 'Damage Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified action will only be executed if this condition is fulfilled by the damage dealt by the '**actor**' entity."}, {'name': 'cooldown', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'Interval of ticks this power needs to recharge before the power can be triggered again.'}, {'name': 'hud_render', 'type': [{'is_array': False, 'type': 'Hud Render'}], 'default': '{"should_render": false}', 'description': 'Determines how the cooldown of this power is visualized on the HUD.'}], 'origins:action_on_item_pickup': [], 'origins:action_on_item_use': [{'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the player after they use an item.'}, {'name': 'item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the _remaining_ item.'}, {'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, the actions will only execute if this condition is fulfilled by the item _before use._'}, {'name': 'trigger', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"finish"', 'description': 'Defines when the action is executed, see below table for accepted values.'}, {'name': 'priority', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'Determines the execution priority of the power.'}], 'origins:action_on_land': [{'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '', 'description': 'The action to execute on the player.'}], 'origins:action_on_wake_up': [{'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the player when they wake up.'}, {'name': 'block_action', 'type': [{'is_array': False, 'type': 'Block Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the bed block.'}, {'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified actions will only execute if this condition is fulfilled by the bed block.'}], 'origins:action_over_time': [{'name': 'interval', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '20', 'description': 'Interval of ticks between subsequent executions of the specified actions. Must be a value of at least 1.'}, {'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'The action to execute on the entity that has the power each interval.'}, {'name': 'rising_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'The action to execute on the first interval tick in which the condition became true.'}, {'name': 'falling_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'The action to execute on the first interval tick in which the condition became false.'}], 'origins:action_when_damage_taken': [{'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '', 'description': 'The action to be executed upon taking damage.'}, {'name': 'damage_condition', 'type': [{'is_array': False, 'type': 'Damage Condition Type'}], 'default': '_optional_', 'description': 'If specified, the action will only trigger when this condition holds for the specified type of damage.'}, {'name': 'cooldown', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'Interval of ticks this power needs to recharge before the power can be triggered again.'}, {'name': 'hud_render', 'type': [{'is_array': False, 'type': 'Hud Render'}], 'default': '{"should_render": false}', 'description': 'Determines how the cooldown of this power is visualized on the HUD.'}], 'origins:action_when_hit': [{'name': 'bientity_action', 'type': [{'is_array': False, 'type': 'Bi-entity Action Type'}], 'default': '', 'description': "The action to be executed on either or both the '**actor**' and '**target**' entities."}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified action will only be executed if this condition is fulfilled by either or both '**actor**' and '**target**' entities."}, {'name': 'damage_condition', 'type': [{'is_array': False, 'type': 'Damage Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified action will only be executed if this condition is fulfilled by the damage dealt by the '**actor**' entity."}, {'name': 'cooldown', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'Interval of ticks this power needs to recharge before the power can be triggered again.'}, {'name': 'hud_render', 'type': [{'is_array': False, 'type': 'Hud Render'}], 'default': '{"should_render": false}', 'description': 'Determines how the cooldown of this power is visualized on the HUD.'}], 'origins:active_self': [{'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '', 'description': 'The action to execute on the player.'}, {'name': 'cooldown', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'Interval of ticks this power needs to recharge before the power can be triggered again.'}, {'name': 'hud_render', 'type': [{'is_array': False, 'type': 'Hud Render'}], 'default': '{"should_render": false}', 'description': 'Determines how the cooldown of this power is visualized on the HUD.'}, {'name': 'key', 'type': [{'is_array': False, 'type': 'Key'}], 'default': '{"key": "key.origins.primary_active"}', 'description': 'Which active key this power should respond to.'}], 'origins:attacker_action_when_hit': [{'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '', 'description': 'The action to execute on the attacker.'}, {'name': 'cooldown', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'Interval of ticks this power needs to recharge before the power can be triggered again.'}, {'name': 'damage_condition', 'type': [{'is_array': False, 'type': 'Damage Condition Type'}], 'default': '_optional_', 'description': 'If set, the action will only trigger when this condition holds for the damage that was dealt by the attacker.'}, {'name': 'hud_render', 'type': [{'is_array': False, 'type': 'Hud Render'}], 'default': '_optional_', 'description': 'If specified, determines how the cooldown of this power is visualized on the HUD.'}], 'origins:attribute': [{'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attributed Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will be applied to its corresponding attribute.'}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attributed Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will be applied to their corresponding attributes.'}, {'name': 'update_health', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': "When true, the player's health percentage will update to match their new maximum health."}], 'origins:attribute_modify_transfer': [{'name': 'class', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The ID of the class to transfer the value of an attribute modifier to. See [Value Modifying Power Classes](../../misc/extras/value_modifying_power_classes.md) for possible values.'}, {'name': 'attribute', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the attribute to get the value from.'}, {'name': 'multiplier', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'Determines the multiplier for the value.'}], 'origins:burn': [{'name': 'interval', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'Interval between being set on fire, in ticks.'}, {'name': 'burn_duration', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'Determines how long the fire should last on the entity each time it is set, in seconds.'}], 'origins:climbing': [{'name': 'allow_holding', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'If `true`, the entity that has the power is able to hold onto blocks.'}, {'name': 'hold_condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '_optional_', 'description': "If specified and `allow_holding` is `true`, the entity that has the power will be able to 'hold onto the block' (not affected by gravity) if this condition is fulfilled, otherwise, defaults to if the entity is sneaking."}], 'origins:conditioned_attribute': [{'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attributed Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will be applied to its corresponding attribute.'}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attributed Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will be applied to their corresponding attributes.'}, {'name': 'tick_rate', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '20', 'description': 'The frequency (in ticks) with which to check the condition. Lower values mean the condition changes are detected more quickly, but this comes at a potentially huge performance cost.'}, {'name': 'update_health', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': "Determines whether the health percentage will update to match the entity's new maximum health."}], 'origins:conditioned_restrict_armor': [{'name': 'head', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, items which fulfills this condition cannot be equipped in the head equipment slot.'}, {'name': 'chest', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, items which fulfills this condition cannot be equipped in the chest equipment slot.'}, {'name': 'legs', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, items which fulfills this condition cannot be equipped in the legs equipment slot.'}, {'name': 'feet', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, items which fulfills this condition cannot be equipped in the feet equipment slot.'}, {'name': 'tick_rate', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '80', 'description': 'The frequency (in ticks) with which to check the condition. Lower values mean the condition changes are detected more quickly, but this comes at a potentially huge performance cost.'}], 'origins:cooldown': [{'name': 'cooldown', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'Interval of ticks this power needs to recharge before the power can be triggered again.'}, {'name': 'hud_render', 'type': [{'is_array': False, 'type': 'Hud Render'}], 'default': '{"should_render": false}', 'description': 'Determines how the cooldown of this power is visualized on the HUD.'}], 'origins:creative_flight': [], 'origins:damage_over_time': [{'name': 'interval', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '20', 'description': 'Duration of ticks to wait between the damage.'}, {'name': 'onset_delay', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '_optional_', 'description': 'How many ticks the power has to be active in order to apply the first damage. If not set, this will be equal to `interval`.'}, {'name': 'damage', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'How much damage will be dealt each interval.'}, {'name': 'damage_easy', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '_optional_', 'description': 'How much damage will be dealt each interval on Easy difficulty. If not set, this will be equal to `damage`.'}, {'name': 'damage_source', 'type': [{'is_array': False, 'type': 'Damage Source'}], 'default': '<span style="color:darkred"><b>DEPRECATED</b></span>', 'description': 'Use `damage_type` instead. See [Damage Source (Data Type)](../data_types/damage_source.md) for more details.'}, {'name': 'damage_type', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': 'apoli:damage_over_time', 'description': 'Defines the properties of the damage source that will be dealt, such as part of its death message, and whether it can bypass armor, shield, etc. (via damage type tags.)'}, {'name': 'protection_enchantment', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': "If set, the total amount of levels of this enchantment will be counted on the player's armor to increase the `onset_delay`."}, {'name': 'protection_effectiveness', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'If `protection_enchantment` is set, this multiplier scales how effective it will be (1.0 = time the `onset_delay` is increased is the same as with Hydrophobia and Water Protection).'}], 'origins:disable_regen': [], 'origins:edible_item': [{'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the player upon consuming an item.'}, {'name': 'item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the item consumed by the player.'}, {'name': 'result_item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the item that is given to the player as a result of consuming an item.'}, {'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, will only make the item edible and the specified actions will only be executed if this condition is fulfilled by the item.'}, {'name': 'food_component', 'type': [{'is_array': False, 'type': 'Food Component'}], 'default': '', 'description': 'The food component that the item grants upon eating it.'}, {'name': 'consuming_time_modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '*optional*', 'description': 'If specified, this modifier will be applied on the maximum time the item is being consumed (in ticks).'}, {'name': 'consuming_time_modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '*optional*', 'description': 'If specified, these modifiers will be applied on the the maximum time the item is being consumed (in ticks).'}, {'name': 'priority', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'Determines the priority of which the power will apply its modification to the item. Must be higher than 0 if the item is already edible.'}], 'origins:effect_immunity': [{'name': 'effect', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, only the status effect with this namespace and ID can not be applied to the entity that has the power.'}, {'name': 'effects', 'type': [{'is_array': True, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, only the status effects with the specified namespace and IDs can not be applied to the entity that has the power.'}, {'name': 'inverted', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': "Determines whether to make the entity immune to the status effect(s) that aren't specified."}], 'origins:elytra_flight': [{'name': 'render_elytra', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': '', 'description': "Determines whether an Elytra should render on the player's back while this power is active."}, {'name': 'texture_location', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, this will be the texture used by the Elytra granted by this power.'}], 'origins:entity_glow': [{'name': 'entity_condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '_optional_', 'description': 'If specified, only entities which fulfill this condition will glow for the player that has the power.'}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the power will only be active if this condition is fulfilled by either or both the 'actor' (the player that has the power) and 'target' (the entity that would glow) entities."}, {'name': 'use_teams', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': "Determines whether glowing entities should use their team's color with their glow. If set to false, the entity will instead use the `red`, `green` and `blue` fields within this power type."}, {'name': 'red', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'Value by which the red component of the glow will be multiplied. Range: 0.0 - 1.0.'}, {'name': 'green', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'Value by which the green component of the glow will be multiplied. Range: 0.0 - 1.0.'}, {'name': 'blue', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'Value by which the blue component of the glow will be multiplied. Range: 0.0 - 1.0.'}], 'origins:entity_group': [{'name': 'group', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'The group to associate with the player. One of `default`, `undead`, `arthropod`, `illager`, or `aquatic`.'}], 'origins:entity_set': [], 'origins:exhaust': [{'name': 'interval', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '20', 'description': 'Duration of ticks to wait between applying exhaustion.'}, {'name': 'exhaustion', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'How much exhaustion will be applied each interval.'}], 'origins:fire_immunity': [], 'origins:fire_projectile': [{'name': 'entity_type', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The ID of the entity type that will be fired.'}, {'name': 'cooldown', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'Interval of ticks this power needs to recharge before the power can be triggered again.'}, {'name': 'hud_render', 'type': [{'is_array': False, 'type': 'Hud Render'}], 'default': '_optional_', 'description': 'Determines how the cooldown of this power is visualized on the HUD.'}, {'name': 'count', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'The amount of projectiles to fire each use.'}, {'name': 'interval', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'Determines the interval for firing multiple projectiles consecutively (in ticks). If set to 0, it will fire all the projectiles at the same tick.'}, {'name': 'start_delay', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'Determines how long the start of the firing process is delayed (in ticks).'}, {'name': 'speed', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.5', 'description': 'The speed applied to the fired projectile.'}, {'name': 'divergence', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'How much each projectile fired is affected by random spread.'}, {'name': 'sound', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If set, the sound with this ID will be played when the power is used.'}, {'name': 'tag', 'type': [{'is_array': False, 'type': 'NBT'}], 'default': '_optional_', 'description': 'NBT data of the entity.'}, {'name': 'key', 'type': [{'is_array': False, 'type': 'Key'}], 'default': '_optional_', 'description': 'Which active key this power should respond to. If none is specified, this power will use the primary active power key (by default G).'}, {'name': 'projectile_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this entity action will be executed on the projectile or entity that will be launched.'}, {'name': 'shooter_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this entity action will be executed on the entity that has the power.'}], 'origins:freeze': [], 'origins:game_event_listener': [{'name': 'trigger_order', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"unspecified"', 'description': 'Determines whether the power type should prioritize game events by distance (`"by_distance"`) or arbitrarily (`"unspecified"`).'}, {'name': 'entity', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines whether the power type should listen to game events emitted by entities.'}, {'name': 'block', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines whether the power type should listen to game events emitted by blocks.'}, {'name': 'bientity_action', 'type': [{'is_array': False, 'type': 'Bi-entity Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on either or both the '**actor**' and '**target**' entities."}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified actions will only be executed if this condition is fulfilled by either or both '**actor**' and '**target**' entities."}, {'name': 'block_action', 'type': [{'is_array': False, 'type': 'Block Action Type'}], 'default': '_optional_', 'description': 'If specified, this block action type will be executed at the position where the game event or vibration was emitted.'}, {'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If specified, only executes the actions if the game event or vibration is emitted by a block that fulfills the block condition.'}, {'name': 'cooldown', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'Interval of ticks this power needs to recharge before being able to listen to game events or vibrations again.'}, {'name': 'hud_render', 'type': [{'is_array': False, 'type': 'Hud Render'}], 'default': '{"should_render": false}', 'description': 'Determines how the cooldown of this power is visualized on the HUD.'}, {'name': 'event', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, will make the power only listen for the game events with this namespace and IDs.'}, {'name': 'events', 'type': [{'is_array': True, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, will make the power only listen for the game events with these namespace and IDs.'}, {'name': 'event_tag', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, will make the power only listen for the game events inside game event tag.'}, {'name': 'show_particle', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines whether the vibration should emit a particle effect.'}], 'origins:grounded': [], 'origins:ignore_water': [], 'origins:inventory': [{'name': 'title', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"container.inventory"', 'description': 'The translation key or literal text to use as the display name for the inventory.'}, {'name': 'container_type', 'type': [{'is_array': False, 'type': 'Container Type'}], 'default': '"dropper"', 'description': 'Determines what type of container the inventory will be similar to.'}, {'name': 'drop_on_death', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'When this is set to true, the player will drop the items in the inventory on death (vanishing items will vanish!).'}, {'name': 'drop_on_death_filter', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If this is set, only item stacks matching this condition will be dropped on death.'}, {'name': 'recoverable', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines if the content of the inventory should be dropped upon losing the power.'}, {'name': 'key', 'type': [{'is_array': False, 'type': 'Key'}], 'default': '{"key": "key.origins.primary_active"}', 'description': 'Which active key this power should respond to.'}], 'origins:invisibility': [{'name': 'render_armor', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines whether armor should be shown or not.'}, {'name': 'render_outline', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines whether the glowing outline should be shown or not.'}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the '**target**' will only be invisible to '**actors**' (either the player or mobs that may see the target) if the bi-entity condition is fulfilled by either or both of them."}], 'origins:invulnerability': [{'name': 'damage_condition', 'type': [{'is_array': False, 'type': 'Damage Condition Type'}], 'default': '', 'description': 'Specifies which damage the player will be immune to.'}], 'origins:item_on_item': [{'name': 'using_item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified actions will only execute if this condition is fulfilled by the item that is used to right-click an item.'}, {'name': 'on_item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified actions will only execute if this condition is fulfilled by the item that has been right-clicked.'}, {'name': 'result', 'type': [{'is_array': False, 'type': 'Item Stack'}], 'default': '_optional_', 'description': 'If specified, this item will be given to the player.'}, {'name': 'result_from_on_stack', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'Determines how many items based on the `on_item` stack will be given as a result for using an item on an item. Mostly to be used in conjunction with `result_item_action`.'}, {'name': 'using_item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the item that is used to right-click an item.'}, {'name': 'on_item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the item that has been right-clicked.'}, {'name': 'result_item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the item that is given to the player.'}, {'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the player after they used an item on an item.'}, {'name': 'click_type', 'type': [{'is_array': False, 'type': 'String'}, {'is_array': False, 'type': 'Integer'}], 'default': '"secondary"', 'description': 'Determines whether to execute the actions if the player does a right-click (`0` or `"primary"`) or left-click (`1` or `"secondary"`) action.'}], 'origins:keep_inventory': [{'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': "If specified, only make the items that fulfill the specified item condition type persist in the entity's inventory."}, {'name': 'slots', 'type': [{'is_array': True, 'type': 'Integer'}], 'default': '_optional_', 'description': "If specified, only make the items that are in the listed inventory slots persist in the entity's inventory. See [Positioned Item Stack Slots](../../misc/extras/positioned_item_stack_slots.md) for possible values."}], 'origins:launch': [{'name': 'cooldown', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'Interval of ticks this power needs to recharge before the power can be triggered again.'}, {'name': 'speed', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'The speed applied to the player in the upwards direction.'}, {'name': 'hud_render', 'type': [{'is_array': False, 'type': 'Hud Render'}], 'default': '_optional_', 'description': 'Determines how the cooldown of this power is visualized on the HUD.'}, {'name': 'sound', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, the sound event with this namespace and ID will be played when the power is triggered.'}, {'name': 'key', 'type': [{'is_array': False, 'type': 'Key'}], 'default': '_optional_', 'description': 'Which active key this power should respond to.'}], 'origins:lava_vision': [{'name': 's', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'Near view. Vanilla default is 0.25, or 0.0 if you are under the effect of Fire Resistance.'}, {'name': 'v', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'Far view. Vanilla default is 1.0, or 3.0 if you are under the effect of Fire Resistance.'}], 'origins:model_color': [{'name': 'red', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'Value by which the red component of the texture will be multiplied. Range: 0.0 - 1.0.'}, {'name': 'green', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'Value by which the green component of the texture will be multiplied. Range: 0.0 - 1.0.'}, {'name': 'blue', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'Value by which the blue component of the texture will be multiplied. Range: 0.0 - 1.0.'}, {'name': 'alpha', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'Value by which the alpha (= transparency) component of the texture will be multiplied. Range: 0.0 - 1.0.'}], 'origins:modify_air_speed': [{'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': "If specified, this modifier will be applied to the entity's air speed."}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': "If specified, these modifiers will be applied to the entity's air speed."}], 'origins:modify_attribute': [{'name': 'attribute', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the attribute to apply the modifier(s) to.'}, {'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will be applied to the specified attribute.'}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will be applied to the specified attribute.'}], 'origins:modify_block_render': [{'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If specified, only modify how the blocks that fulfill this condition would look like.'}, {'name': 'block', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the replacement block.'}], 'origins:modify_break_speed': [{'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '*optional*', 'description': 'If specified, the modifier(s) will only apply to the blocks that fulfills this condition.'}, {'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '*optional*', 'description': 'If specified, this modifier will be applied to the break speed.'}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '*optional*', 'description': 'If specified, these modifiers will be applied to the break speed.'}, {'name': 'hardness_modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '*optional*', 'description': "If specified, this modifier will be applied to the *effective* hardness value of the block while calculating the block's break speed."}, {'name': 'hardness_modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '*optional*', 'description': "If specified, these modifiers will be applied to the *effective* hardness value of the block while calculating the block's break speed."}], 'origins:modify_camera_submersion': [{'name': 'from', 'type': [{'is_array': False, 'type': 'String'}], 'default': '_optional_', 'description': 'If specified, only this submersion type will be modified. Accepts either `"none"` , `"water"` or `"lava"`'}, {'name': 'to', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'Which submersion type to change to. Accepts either `"none"`, `"water"` or `"lava"`'}], 'origins:modify_crafting': [{'name': 'recipe', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, modifies the result item of the recipe that matches the specified namespace and ID.'}, {'name': 'item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the result item of a recipe.'}, {'name': 'item_action_after_crafting', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the result item of a recipe after crafting the said recipe.'}, {'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the player upon crafting a recipe.'}, {'name': 'block_action', 'type': [{'is_array': False, 'type': 'Block Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the block used for crafting a recipe.'}, {'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, the item from the `result` field and the specified actions will only be applied if this condition is fulfilled by the result item of a recipe.'}, {'name': 'result', 'type': [{'is_array': False, 'type': 'Item Stack'}], 'default': '_optional_', 'description': 'If specified, this item will replace the item of a recipe.'}], 'origins:modify_damage_dealt': [{'name': 'bientity_action', 'type': [{'is_array': False, 'type': 'Bi-entity Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on either or both the '**actor**' and '**target**' entities whenever the modifier(s) is/are applied."}, {'name': 'self_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on the '**actor**' entity whenever the modifier(s) is/are applied."}, {'name': 'target_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on the '**target**' entity whenever the modifier(s) is/are applied."}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified action(s)/modifier(s) will only be executed/applied if this condition is fulfilled by either or both '**actor**' and '**target**' entities."}, {'name': 'target_condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified actions/modifiers will only be executed/applied if this condition is fulfilled by the '**target**' entity."}, {'name': 'damage_condition', 'type': [{'is_array': False, 'type': 'Damage Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified actions/modifiers will only be executed/applied if this condition is fulfilled by the damage dealt by the '**actor**' entity."}, {'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': "If specified, this modifier will be applied to the damage dealt by the '**actor**' entity."}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': "If specified, these modifiers will be applied t othe damage dealt by the '**actor**' entity."}], 'origins:modify_damage_taken': [{'name': 'bientity_action', 'type': [{'is_array': False, 'type': 'Bi-entity Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on either or both the '**actor**' and '**target**' entities whenever the modifier(s) is/are applied."}, {'name': 'self_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on the '**target**' entity whenever the modifier(s) is/are applied."}, {'name': 'attacker_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on the '**actor**' entity whenever the modifier(s) is/are applied."}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified action(s)/modifier(s) will only be executed/applied if this condition is fulfilled by either or both '**actor**' and '**target**' entities."}, {'name': 'apply_armor_condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '_optional_', 'description': "If specified, armor will only be applied to the damage taken if this condition is fulfilled by the '**target**' entity."}, {'name': 'damage_armor_condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '_optional_', 'description': "If specified, worn armor will only be damaged if this condition is fulfilled by the '**target**' entity."}, {'name': 'damage_condition', 'type': [{'is_array': False, 'type': 'Damage Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified modifiers(s) and/or action(s) will only apply if the taken damage fulfills this condition.'}, {'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': "If specified, this modifier will be applied to the damage taken by the '**target**' entity."}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': "If specified, these modifiers will be applied to the damage taken by the '**target**' entity."}], 'origins:modify_enchantment_level': [{'name': 'enchantment', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'ID of the enchantment to apply/modify the level of to the entity., e.g. `minecraft:protection`.'}, {'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, only applies/modifies the level of the specified enchantment to/from the entity if the item condition is fulfilled by the item.'}, {'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will be applied to the current level of the specified enchantment from the entity.'}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will be applied to the current level of the specified enchantment from the entity.'}], 'origins:modify_exhaustion': [{'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will be applied to the received exhaustion amount.'}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will be applied to the received exhaustion amount.'}], 'origins:modify_falling': [{'name': 'velocity', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '', 'description': 'Determines the speed of the falling velocity.'}, {'name': 'take_fall_damage', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines whether the entity should take fall damage or not.'}], 'origins:modify_fluid_render': [{'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If specified, only modify how the blocks that fulfills this condition would look like.'}, {'name': 'fluid_condition', 'type': [{'is_array': False, 'type': 'Fluid Condition Type'}], 'default': '_optional_', 'description': 'If specified, only modify how the fluids that fulfills this condition would look like.'}, {'name': 'fluid', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the replacement fluid.'}], 'origins:modify_food': [{'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified actions and modifier(s) will only apply to food items that fulfills this condition.'}, {'name': 'item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': 'If specified, this item action type will be executed on the remaining item stacks that was consumed.'}, {'name': 'replace_stack', 'type': [{'is_array': False, 'type': 'Item Stack'}], 'default': '_optional_', 'description': 'If specified, this item stack will replace the item stack that was consumed *after* consuming it.'}, {'name': 'food_modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will apply to the food amount gained by eating a food item.'}, {'name': 'food_modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will apply to the food amount gained by eating a food item.'}, {'name': 'saturation_modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will apply to the saturation amount gained by eating a food item.'}, {'name': 'saturation_modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will apply to the saturation amount gained by eating a food item.'}, {'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the player that has ate a food item.'}, {'name': 'always_edible', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': "Determines whether a food item can be eaten regardless of the player's hunger bar being full."}, {'name': 'prevent_effects', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'If set to `true`, prevent status effects from being applied.'}], 'origins:modify_grindstone': [{'name': 'result_type', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"unchanged"', 'description': 'Determines whether to not change the initial item stack (`"unchanged"`), replace it with the item stack specified in the `result_stack` field (`"specified"`), replace it with the item stack from the top input slot of a Grindstone block (`"from_top"`) or replace it with the item stack from the bottom input slot of a Grindstone block (`"from_bottom"`).'}, {'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the player upon taking the item stack from the result slot of a Grindstone.'}, {'name': 'block_action', 'type': [{'is_array': False, 'type': 'Block Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the Grindstone block upon taking the item stack from the result slot of the said Grindstone block.'}, {'name': 'item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the result item stack.'}, {'name': 'item_action_after_grinding', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the result item stack **after** the grinding process.'}, {'name': 'top_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified actions will only be executed if the item stack from the top input slot of the Grindstone fulfills this condition.'}, {'name': 'bottom_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified actions will only be executed if the item stack from the bottom input slot of the Grindstone fulfills this condition.'}, {'name': 'output_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified actions will only be executed if the item stack from the output/result slot of the Grindstone fulfills this condition.'}, {'name': 'result_stack', 'type': [{'is_array': False, 'type': 'Item Stack'}], 'default': '_optional_', 'description': 'If specified, this item stack will be used as a replacement only if the `result_type` field has a value of `"specified"`.'}, {'name': 'xp_modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will be applied to the value of the experience received from removing an enchantment from an item stack.'}], 'origins:modify_harvest': [{'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If specified, only blocks that fulfill this condition are affected.'}, {'name': 'allow', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': '', 'description': 'Determines whether the player is be able to harvest the block.'}], 'origins:modify_healing': [{'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will be applied to your healing bonus.'}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will be applied to your healing bonus.'}], 'origins:modify_insomnia_ticks': [{'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will be applied to the value.'}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will be applied to the value.'}], 'origins:modify_jump': [{'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will be applied to the upwards velocity.'}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will be applied to the upwards velocity.'}, {'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the entity that has the power whenever the entity jumps.'}], 'origins:modify_lava_speed': [{'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will be applied to the movement speed while in lava.'}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will be applied to the movement speed while in lava.'}], 'origins:modify_player_spawn': [{'name': 'dimension', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the dimension the player should spawn in.'}, {'name': 'biome', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, the player will only spawn in the biome that matches the specified namespace and ID.'}, {'name': 'structure', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, the player will only spawn in the specified namespace and ID of the structure. **The structure needs to generate in the specified dimension.**'}, {'name': 'spawn_strategy', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"default"', 'description': 'Determines whether the player should spawn near the world spawnpoint (0, 0) of the dimension (`"center"`) or near the coordinates of the Overworld spawnpoint (whilst considering the value of the `dimension_distance_multiplier` field) (`"default"`).'}, {'name': 'dimension_distance_multiplier', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '_optional_', 'description': 'Defines the ratio of Overworld blocks to blocks in the specified dimension. e.g: for The Nether dimension, this would be set to `0.125`. **This needs to be set when `spawn_strategy` is set to `"default"`**'}], 'origins:modify_projectile_damage': [{'name': 'damage_condition', 'type': [{'is_array': False, 'type': 'Damage Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified modifier(s) and action(s) will only apply if the dealt damage fulfills by this condition.'}, {'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will apply to the damage amount.'}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will apply to the damage amount.'}, {'name': 'target_condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified modifier(s) and action(s) will only apply if the the entity that has been hit fulfills this condition.'}, {'name': 'self_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on the 'actor' entity (the entity that has the power) whenever the modifier(s) are applied."}, {'name': 'target_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the the entity that has been hit whenever the modifier(s) are applied.'}], 'origins:modify_slipperiness': [{'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If specified, the modifier(s) will only apply to the blocks that fulfills this condition.'}, {'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': "If specified, this modifier will be applied to the entity's slipperiness."}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': "If specified, these modifiers will be applied to the entity's slipperiness."}], 'origins:modify_status_effect_amplifier': [{'name': 'status_effect', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, only this status effect will have its amplifier modified upon being received.'}, {'name': 'status_effects', 'type': [{'is_array': True, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, only these status effect(s) will have its amplifier modified upon being received.'}, {'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will be applied to the amplifier of the specified status effect(s).'}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will be applied to the amplifier of the specified status effect(s).'}], 'origins:modify_status_effect_duration': [{'name': 'status_effect', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, only this status effect will have its duration modified upon being received.'}, {'name': 'status_effects', 'type': [{'is_array': True, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, only these status effects will have its duration modified upon being received.'}, {'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will be applied to the duration of the specified status effect(s).'}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will be applied to the duration of the specified status effect(s).'}], 'origins:modify_swim_speed': [{'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will apply to the swim speed.'}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will apply to the swim speed.'}], 'origins:modify_velocity': [{'name': 'axes', 'type': [{'is_array': True, 'type': 'Identifier'}], 'default': '["x","y","z"]', 'description': 'Used to specify the axes affected by this modifier.'}, {'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will apply to velocity in the specified axes.'}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will apply to the specified axes.'}], 'origins:modify_xp_gain': [{'name': 'modifier', 'type': [{'is_array': False, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, this modifier will apply to the experience gained.'}, {'name': 'modifiers', 'type': [{'is_array': True, 'type': 'Attribute Modifier'}], 'default': '_optional_', 'description': 'If specified, these modifiers will apply to the experience gained.'}], 'origins:multiple': [], 'origins:night_vision': [{'name': 'strength', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'Determines how strong the night vision effect is. Accepted range is from 0.0 to 1.0.'}], 'origins:overlay': [{'name': 'texture', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the texture to use as an overlay.'}, {'name': 'strength', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'If the `"texture"` draw mode is used, it determines the alpha (transparency) value of the texture. If the `"nausea"` draw mode is used, it determines the value of how the texture is stretched (1.0 = screen size). Range: 0.0 to 1.0.'}, {'name': 'red', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0 ', 'description': 'Value by which the red component of the texture will be multiplied. Range: 0.0 to 1.0.'}, {'name': 'green', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'Value by which the green component of the texture will be multiplied. Range: 0.0 to 1.0.'}, {'name': 'blue', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'Value by which the blue component of the texture will be multiplied. Range: 0.0 to 1.0.'}, {'name': 'draw_mode', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'Determines whether to treat black as transparent or draw the texture as is (`"nausea"` or `"texture"` respectively).'}, {'name': 'draw_phase', 'type': [{'is_array': False, 'type': 'String'}], 'default': '', 'description': 'Determines if the overlay should render below or above the HUD (`"below_hud"` or `"above_hud"` respectively).'}, {'name': 'hide_with_hud', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines if the overlay should be hidden if the HUD elements are hidden (with F1).'}, {'name': 'visible_in_third_person', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines if the overlay is visible in third person.'}], 'origins:particle': [{'name': 'particle', 'type': [{'is_array': False, 'type': 'Particle Effect'}], 'default': '', 'description': 'The particle type that will be spawned.'}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '*optional*', 'description': 'If specified, the particle will only be visible if this bi-entity condition is fulfilled by either or both the entity that has the power and the entity looking at the entity that has the power.'}, {'name': 'count', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'Determines the amount of particles to spawn.'}, {'name': 'speed', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '0.0', 'description': 'Determines the speed of the specified particle type.'}, {'name': 'force', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines whether to display the emitted particles within 512 blocks (`true`) or 32 blocks (`false`).'}, {'name': 'spread', 'type': [{'is_array': False, 'type': 'Vector'}], 'default': '{"x": 0.5, "y": 0.5, "z": 0.5}', 'description': 'Determines the size of the three-dimensional cuboid volume to spawn the specified particle type in.'}, {'name': 'offset_x', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '0.0', 'description': 'The offset of where the particle will be centered in the X axis.'}, {'name': 'offset_y', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '0.5', 'description': 'The offset of where the particle will be centered in the Y axis.'}, {'name': 'offset_z', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '0.0', 'description': 'The offset of where the particle will be centered in the Z axis.'}, {'name': 'frequency', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'Determines how often the particles should spawn (interval in ticks).'}, {'name': 'visible_in_first_person', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines whether the particle type should be visible in first person.'}, {'name': 'visible_while_invisible', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines whether the particle type should be visible if the entity is invisible.'}], 'origins:phasing': [{'name': 'blacklist', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'If set to true, the `block_condition` field will define which blocks the player can **NOT** move through.'}, {'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If specified, the entity will only be able to move through these blocks (or **not** be able to move through these, depending on what `blacklist` is set to).'}, {'name': 'render_type', 'type': [{'is_array': False, 'type': 'String'}], 'default': '"blindness"', 'description': 'Determines how the environment is rendered when "phasing" through (moving) blocks. Accepts `"blindness"`, `"remove_blocks"` or `"none"`.'}, {'name': 'view_distance', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '10.0', 'description': 'Determines how far the player can look through walls when "phasing" (moving) through blocks when `render_type` is set to `"blindness"`.'}, {'name': 'phase_down_condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '_optional_', 'description': 'If specified, the entity will only be able to "phase" (move) downwards if this condition is fulfilled.'}], 'origins:prevent_being_used': [{'name': 'bientity_action', 'type': [{'is_array': False, 'type': 'Bi-entity Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on either or both the '**actor**' and '**target**' entities."}, {'name': 'held_item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on the item used by the '**actor**' entity for right-clicking the '**target**' entity."}, {'name': 'result_item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on the item that is given to the '**actor**' entity."}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified actions will only be executed if this condition is fulfilled by either or both '**actor**' and '**target**' entities."}, {'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified actions will only be executed if this condition is fulfilled by the item used by the '**actor**' entity for right-clicking the '**target**' entity."}, {'name': 'hands', 'type': [{'is_array': True, 'type': 'String'}], 'default': '["off_hand", "main_hand"]', 'description': 'Determines if the power should be activated if the \'**actor**\' entity used the specified hand(s). Accepts `"off_hand"`, `"main_hand"` or both.'}, {'name': 'result_stack', 'type': [{'is_array': False, 'type': 'Item Stack'}], 'default': '_optional_', 'description': "If specified, this item stack will be given to the '**actor**' entity."}], 'origins:prevent_block_place': [], 'origins:prevent_block_selection': [{'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If specified, only blocks that fulfill this condition are affected.'}], 'origins:prevent_block_use': [{'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '', 'description': 'If specified, only blocks that fulfill this condition are affected.'}], 'origins:prevent_death': [{'name': 'damage_condition', 'type': [{'is_array': False, 'type': 'Damage Condition Type'}], 'default': '_optional_', 'description': 'If specified, death will only be prevented if the damage dealt to the entity fulfills this condition.'}, {'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the entity when death is prevented.'}], 'origins:prevent_elytra_flight': [{'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed upon the entity trying to fly an Elytra/power that uses the [Elytra Flight (Power Type)](elytra_flight.md).'}], 'origins:prevent_entity_collision': [{'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the collision will only be prevented if this condition is fulfilled by either or both '**actor**' and '**target**' entities."}], 'origins:prevent_entity_render': [{'name': 'entity_condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '_optional_', 'description': 'If specified, only entities which fulfills this condition will be affected.'}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the power will only be active if this condition is fulfilled by either or both the 'actor' (the player that has the power) and 'target' (the entity that will not render) entities."}], 'origins:prevent_entity_use': [{'name': 'bientity_action', 'type': [{'is_array': False, 'type': 'Bi-entity Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on either or both the '**actor**' and '**target**' entities."}, {'name': 'held_item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on the item used by the '**actor**' entity for right-clicking the '**target**' entity."}, {'name': 'result_item_action', 'type': [{'is_array': False, 'type': 'Item Action Type'}], 'default': '_optional_', 'description': "If specified, this action will be executed on the item that is given to the '**actor**' entity."}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified actions will only be executed if this condition is fulfilled by either or both '**actor**' and '**target**' entities."}, {'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': "If specified, the specified actions will only be executed if this condition is fulfilled by the item used by the '**actor**' entity for right-clicking the '**target**' entity."}, {'name': 'hands', 'type': [{'is_array': True, 'type': 'String'}], 'default': '["off_hand", "main_hand"]', 'description': 'Determines if the power should be activated if the \'**actor**\' entity used the specified hand(s). Accepts `"off_hand"`, `"main_hand"` or both.'}, {'name': 'result_stack', 'type': [{'is_array': False, 'type': 'Item Stack'}], 'default': '_optional_', 'description': "If specified, this item stack will be given to the '**actor**' entity."}], 'origins:prevent_feature_render': [{'name': 'feature', 'type': [{'is_array': False, 'type': 'Feature Renderer'}], 'default': '_optional_', 'description': 'If specified, this feature renderer will not be rendered.'}, {'name': 'features', 'type': [{'is_array': True, 'type': 'Feature Renderer'}], 'default': '_optional_', 'description': 'If specified, these feature renderers will not be rendered.'}], 'origins:prevent_game_event': [{'name': 'event', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, the game event with this namespace and ID will be prevent from being emitted by the entity.'}, {'name': 'events', 'type': [{'is_array': True, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, the game events with these namespace and IDs will be prevent from being emitted by the entity.'}, {'name': 'tag', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '_optional_', 'description': 'If specified, the game events inside game event tag will be prevented from being emitted by the entity.'}, {'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the entity upon preventing game events.'}], 'origins:prevent_item_pickup': [], 'origins:prevent_item_use': [{'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, only items that fulfills this condition will be prevented from being used.'}], 'origins:prevent_sleep': [{'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If specified, sleep will only be prevented if this condition is fulfilled by the bed block.'}, {'name': 'message', 'type': [{'is_array': False, 'type': 'Default Translatable Text Component'}], 'default': '{"translatable": "text.apoli.cannot_sleep"}', 'description': 'The message that will be shown when sleep is prevented this way.'}, {'name': 'set_spawn_point', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': "Determines whether the spawnpoint of the player is set upon right-clicking a bed while being prevented. (similar to what happens when you right-click a bed while it's daytime)"}, {'name': 'priority', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'Determines the priority of which power will prevent the player to sleep, set their spawn and display a message. The power with `set_spawn_point` set to `true` and the highest `priority` value will be prioritized.'}], 'origins:prevent_sprinting': [], 'origins:recipe': [{'name': 'recipe', 'type': [{'is_array': False, 'type': 'Crafting Recipe'}], 'default': '', 'description': 'The recipe to craft, including an `id` field which can be any arbitrary (but unique) identifier.'}], 'origins:replace_loot_table': [{'name': 'replace', 'type': [{'is_array': False, 'type': 'Object'}], 'default': '', 'description': 'An object with `"key": "value"` pairs that determine which loot table (`"key"`) will be replaced with a new loot table (`"value"`).'}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': "If specified, the loot tables will only be replaced if this condition is fulfilled by either or both '**actor**' and '**target**' entities."}, {'name': 'block_condition', 'type': [{'is_array': False, 'type': 'Block Condition Type'}], 'default': '_optional_', 'description': 'If specified, the loot tables will only be replaced if the block at the context of the loot tables fulfill this condition.'}, {'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, the loot tables will only be replaced if the item in the context of the loot tables fulfill this condition.'}, {'name': 'priority', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'Determines the application priority of the power.'}], 'origins:resource': [{'name': 'min', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The minimum value of the resource.'}, {'name': 'max', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The maximum value of the resource.'}, {'name': 'hud_render', 'type': [{'is_array': False, 'type': 'Hud Render'}], 'default': '_optional_', 'description': 'Determines how the resource is visualized on the HUD.'}, {'name': 'start_value', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '_optional_', 'description': 'The value of the resource when the entity first receives the power. If not set, this will be set to the value of the `min` integer field.'}, {'name': 'min_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the entity whenever the minimum value is reached.'}, {'name': 'max_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '_optional_', 'description': 'If specified, this action will be executed on the entity whenever the maximum value is reached.'}], 'origins:restrict_armor': [{'name': 'head', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, items which fulfills this condition cannot be equipped in the head equipment slot.'}, {'name': 'chest', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, items which fulfills this condition cannot be equipped in the chest equipment slot.'}, {'name': 'legs', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, items which fulfills this condition cannot be equipped in the legs equipment slot.'}, {'name': 'feet', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, items which fulfills this condition cannot be equipped in the feet equipment slot.'}], 'origins:self_action_on_hit': [{'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '', 'description': 'The action to execute on the entity.'}, {'name': 'cooldown', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'Interval of ticks this power needs to recharge before the power can be triggered again.'}, {'name': 'hud_render', 'type': [{'is_array': False, 'type': 'Hud Render'}], 'default': '_optional_', 'description': 'If specified, determines how the cooldown of this power is visualized on the HUD.'}, {'name': 'damage_condition', 'type': [{'is_array': False, 'type': 'Damage Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified action will only be executed if the damage dealt is fulfills this condition.'}, {'name': 'target_condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified actions will only be executed if the entity/entities that has been hit fulfills this condition.'}], 'origins:self_action_on_kill': [{'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '', 'description': 'The action to execute on the entity.'}, {'name': 'cooldown', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'Interval of ticks this power needs to recharge before the power can be triggered again.'}, {'name': 'hud_render', 'type': [{'is_array': False, 'type': 'Hud Render'}], 'default': '_optional_', 'description': 'If specified, determines how the cooldown of this power is visualized on the HUD.'}, {'name': 'damage_condition', 'type': [{'is_array': False, 'type': 'Damage Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified action will only execute if the damage dealt by the entity fulfills this condition.'}, {'name': 'target_condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified action will only execute if the entity that has been killed fulfills this condition.'}], 'origins:self_action_when_hit': [{'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '', 'description': 'The action to execute on the entity.'}, {'name': 'cooldown', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'Interval of ticks this power needs to recharge before the power can be triggered again.'}, {'name': 'hud_render', 'type': [{'is_array': False, 'type': 'Hud Render'}], 'default': '_optional_', 'description': 'If specified, determines how the cooldown of this power is visualized on the HUD.'}, {'name': 'damage_condition', 'type': [{'is_array': False, 'type': 'Damage Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified action will only execute if the damage taken fulfills this condition.'}], 'origins:self_glow': [{'name': 'entity_condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '_optional_', 'description': 'If specified, only entities that fulfill this condition will see the entity that has the power glow.'}, {'name': 'bientity_condition', 'type': [{'is_array': False, 'type': 'Bi-entity Condition Type'}], 'default': '_optional_', 'description': 'If specified, only entities that fulfill this bi-entity condition in relation to the entity that has the power will see the entity that has the power glow.'}, {'name': 'use_teams', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': "Determines whether glowing entities should use their team's color with their glow. If set to false, the entity will instead use the `red`, `green` and `blue` fields within this power type."}, {'name': 'red', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'Value by which the red component of the glow will be multiplied. Range: 0.0 - 1.0.'}, {'name': 'green', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'Value by which the green component of the glow will be multiplied. Range: 0.0 - 1.0.'}, {'name': 'blue', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'Value by which the blue component of the glow will be multiplied. Range: 0.0 - 1.0.'}], 'origins:shader': [{'name': 'shader', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'Specifies the location of the shader resource file to use.'}, {'name': 'toggleable', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines if the applied shader can be toggled.'}], 'origins:shaking': [], 'origins:simple': [], 'origins:stacking_status_effect': [{'name': 'min_stacks', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The minimum number of stacks. Negative numbers are allowed.'}, {'name': 'max_stacks', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'The maximum number of stacks.'}, {'name': 'duration_per_stack', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '', 'description': 'Determines the duration of the specified status effect(s) for each stack.'}, {'name': 'tick_rate', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '10', 'description': 'Determines how fast the power will gain/lose stacks in ticks.'}, {'name': 'effect', 'type': [{'is_array': False, 'type': 'Status Effect Instance'}], 'default': '_optional_', 'description': 'If specified, this status effect will be applied on the entity that has the power.'}, {'name': 'effects', 'type': [{'is_array': True, 'type': 'Status Effect Instance'}], 'default': '_optional_', 'description': 'If specified, these status effects will be applied on the entity that has the power.'}], 'origins:starting_equipment': [{'name': 'stack', 'type': [{'is_array': False, 'type': 'Positioned Item Stack'}], 'default': '_optional_', 'description': 'If specified, this item will be given to the player (can be specified in an inventory slot).'}, {'name': 'stacks', 'type': [{'is_array': True, 'type': 'Positioned Item Stack'}], 'default': '_optional_', 'description': 'If specified, these items will be given to the player (can be specified in an inventory slot).'}, {'name': 'recurrent', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'false', 'description': 'Determines whether the specified item(s) should be given after respawning.'}], 'origins:status_bar_texture': [{'name': 'texture', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '<span style="color: darkred"><b>DEPRECATED</b></span>', 'description': 'The identifier (including the `textures` directory and the `.png` file extension) of the status bar sprite sheet to replace the default one with (e.g: [the vanilla status bar sprite sheet](https://raw.githubusercontent.com/misode/mcmeta/6d496b1a91476c4fdd45fdb093d0319141f9c109/assets/minecraft/textures/gui/icons.png)). <span style="color: darkred"><b>Use <code>texture_map</code> instead.</b></span>'}, {'name': 'texture_map', 'type': [{'is_array': False, 'type': 'Object'}], 'default': '_optional_', 'description': 'An object with `"key": "value"` [identifier](../data_types/identifier.md) pairs that determine which status bar texture sprite (`"key"`) will be replaced by a new status bar texture sprite (`"value"`).'}], 'origins:swimming': [], 'origins:target_action_on_hit': [{'name': 'entity_action', 'type': [{'is_array': False, 'type': 'Entity Action Type'}], 'default': '', 'description': 'The action to execute on the entity that has been hit.'}, {'name': 'cooldown', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '1', 'description': 'Interval of ticks this power needs to recharge before the power can be triggered again.'}, {'name': 'hud_render', 'type': [{'is_array': False, 'type': 'Hud Render'}], 'default': '_optional_', 'description': 'If specified, determines how the cooldown of this power is visualized on the HUD.'}, {'name': 'damage_condition', 'type': [{'is_array': False, 'type': 'Damage Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified action will only execute if the damage dealt by the entity that has the power fulfills this condition.'}, {'name': 'target_condition', 'type': [{'is_array': False, 'type': 'Entity Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified action will only execute if the entity that has been hit fulfills this condition.'}], 'origins:toggle': [{'name': 'active_by_default', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines whether the state of this power type should be ON by default.'}, {'name': 'key', 'type': [{'is_array': False, 'type': 'Key'}], 'default': '{"key": "key.origins.primary_active"}', 'description': 'Which active key this power should respond to.'}, {'name': 'retain_state', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Determines whether the power remains active even if the specified condition (if any) is no longer met. If set to `true`, the power will stay in its current state regardless of the condition. If set to `false`, the power will deactivate when the condition is not fulfilled.'}], 'origins:toggle_night_vision': [{'name': 'active_by_default', 'type': [{'is_array': False, 'type': 'Boolean'}], 'default': 'true', 'description': 'Whether this power starts in the on or off state.'}, {'name': 'strength', 'type': [{'is_array': False, 'type': 'Float'}], 'default': '1.0', 'description': 'How strong the night vision effect is. Range: 0.0 - 1.0.'}, {'name': 'key', 'type': [{'is_array': False, 'type': 'Key'}], 'default': '{"key": "key.origins.primary_active"}', 'description': 'Which active key this power should respond to.'}], 'origins:tooltip': [{'name': 'item_condition', 'type': [{'is_array': False, 'type': 'Item Condition Type'}], 'default': '_optional_', 'description': 'If specified, the specified tooltip(s) will only apply to items that fulfills this condition.'}, {'name': 'text', 'type': [{'is_array': False, 'type': 'Text Component'}], 'default': '_optional_', 'description': 'If specified, apply this string as a tooltip.'}, {'name': 'texts', 'type': [{'is_array': True, 'type': 'Text Component'}], 'default': '_optional_', 'description': 'If specified, apply these strings as a tooltip.'}, {'name': 'order', 'type': [{'is_array': False, 'type': 'Integer'}], 'default': '0', 'description': 'Determines the placement order of the tooltip(s) of the power.'}], 'origins:walk_on_fluid': [{'name': 'fluid', 'type': [{'is_array': False, 'type': 'Identifier'}], 'default': '', 'description': 'The namespace and ID of the fluid tag on which the player should be able to walk onto. Most important examples: `minecraft:water` and `minecraft:lava`.'}]}
power = ["type", "name", "description", "hidden", "condition", "loading_priority", "badges"]